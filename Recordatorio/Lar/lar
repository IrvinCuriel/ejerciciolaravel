(INSTALAR COMPOSER VER TURORIAL)
*En terminal
composer
composer global require "laravel/installer"
Nota: nos indica un cambio de directorio algo como:
/user/irvin/.config/.composer
***************************************************************************************************************************************
/home/irvin/.config/composer

:~/.composer$ ls -l
total 8
drwxr-xr-x 4 root root 4096 ago 31 14:55 cache
-rw-r--r-- 1 root root    4 ago 31 14:55 composer.json

PATH=/home/TU_USUARIO_AQUI/.config/composer/vendor/bin:$PATH
PATH=/home/irvin/.composer/vendor/bin:$PATH
$HOME/.composer/vendor/bin
export PATH="/home/irvin/.composer/vendor/bin:$PATH"
export PATH="$HOME/.config/composer/vendor/bin:$PATH"

Nota: este es el que se uso:
en .bashrc colocar export PATH="$PATH:$HOME"/.composer/vendor/bin
export PATH="$PATH:$HOME"/.composer/vendor/bin

***Para poder ver los archivos y carpetas ocultos contenidos en un directorio bastará con pulsar la combinación de teclas Ctrl+H.***
en .bashrc colocar export PATH="$PATH:$HOME"/.composer/vendor/bin

https://www.youtube.com/watch?v=OQCzVonb34w
https://laravel.com/docs/7.x

PHP 7.3
https://www.sololinux.es/instalar-php-7-3-en-ubuntu-debian-y-derivados/

***************************************************************************************************************************************
ACTUALIZAR COMPOSER 2.0

 1996  which composer
 1997  php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
 1998  php -r "if (hash_file('sha384', 'composer-setup.php') === '756890a4488ce9024fc62c56153228907f1545c228516cbf63f885e036d37e9a59d27d63f46af1d4d07ee0f76181c7d3') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
 1999  ls -l
 2000  sudo php composer-setup.php --install-dir /usr/bin --filename composer
 2001  composer


https://getcomposer.org/
https://blog.packagist.com/composer-2-0-is-now-available/
https://getcomposer.org/download/

https://www.youtube.com/watch?v=Cuzc0nO6mDA

***************************************************************************************************************************************

could not find driver (SQL: select * from information_schema.tables where table_schema

https://stackoverflow.com/questions/46745365/artisan-migrate-could-not-find-driver
If your php.ini file exists then in configuration file simply uncomment the extension:

;extension=php_pdo_mysql.dll

Else follow below steps

step1:php -v
step2: Install php mysql extension
php 7.0 sudo apt-get install php7.0-mysql
php 7.1 sudo apt-get install php7.1-mysql
php 7.2 sudo apt-get install php7.2-mysql
php 7.3 sudo apt-get install php7.3-mysql
step3: service apache2 restart
step4: php artisan migrate

***************************************************************************************************************************************
proc_open(): fork failed errors#
https://getcomposer.org/doc/articles/troubleshooting.md#proc-open-fork-failed-errors

How To Add Swap on Ubuntu 14.04
https://www.digitalocean.com/community/tutorials/how-to-add-swap-on-ubuntu-14-04

sudo swapon -s

How to Add Swap Space on Ubuntu 18.04
https://linuxize.com/post/how-to-add-swap-space-on-ubuntu-18-04/

https://ubunlog.com/verifica-la-ram-instalada-ubuntu/
Cómo verificar la RAM instalada, usada y disponible
***************************************************************************************************************************************
  PRIMER PROYECTO
***************************************************************************************************************************************
*En terminal
cd Desktop
composer create-project laravel/laravel=^7 ejerciciolaravel --prefer-dist
cd ejercicioLaravel
composer install
php artisan serve
***************************************************************************************************************************************
Que es Artisan:
Es el CLI incluido en laravel

php artisan
php artisan list
php artisan help

php artisan help serve
php artisan serve
php artisan serve --port=3000

***************************************************************************************************************************************
Conectado a una base de datos mysql

php artisan serve

en archivo .env configurar lo siguiente:
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=recetaslaravel
DB_USERNAME=root
DB_PASSWORD=root

*nota: solo soporta MySQL, PostgreSQL, SQLite, SQL Server
cuando se hacen cambios en el archivo .env REINICIAR EL SERVIDOR

***************************************************************************************************************************************
Que es blade:
Se conoce como un templete engine incluido en laravel para la V del MVC
encargado de lo que se ve en la pantalla.
Debe llevar blade.php

--------------------------------------------
php vs blade
<?php
echo $titulo;
{{ $titulo }}

--------------------------------------------
directivas en blade:

{{ 1 + 1 }}

@php
 $variable = 20;
@end
{{ variable }}

@if ( $variable === 20 )
  {{ "si es 20"}}
@endif

--------------------------------------------
welcome.blade.php

En routes/web.php se puede ver:
Route::get('/', function () {
    return view('welcome');
});

***************************************************************************************************************************************
Que es el Routing:
Laravel ya cuenta con soporte  a las peticiones HTTP,
se les conoce como Routing.
API o Web

Se puede agregar un Controller (Recomendado) o un Closure (ideal si no se cree necesitar un controller)

Con Controller:
Route::get('/', 'ClientesController@index');

Con Closure:
Route::get('/', function () {
    return ´Contenido desde Closure´;
});

***************************************************************************************************************************************
Crear un Controller

php artisan (vemos la lista y revisamos en la parte de los makes)
php artisan help make:controller (aparecen las opciones y lo unico obligatorio es el nombre)

php artisan make:controller Recetacontroller

*ver grafico MVC
***************************************************************************************************************************************
Invokable controller
Controller con un solo metodo

*En el controlador RecetaController:
class HomeController extends Controller
{
  public function __invoke()
  {
    return view('nosotros');
  }
}

*En web.php:
Route::get('/nosotros', 'RecetaController');

*En Terminal:
php artisan make:controller RecetaController -i

***************************************************************************************************************************************
ROUTES API Y Web

Web: Se van para mostrar alguna vista.
API: Se recomiendan para mostrar un respesta JSON y crear una API

*En el controlador RecetaController:
class HomeController extends Controller
{
  public function __invoke(Request $request)
  {
    $receta = [
      'nombre' = 'Pizza Hawaiana',
      'descripcion' = 'Preparar la mejor pizza'
    ];

    return receta;
  }
}

**En API.php:
Route::get('/nosotros', 'RecetaController');

*al llamar la url de API http://127.0.0.1:8000/api/nosotros
entrega JSON

***************************************************************************************************************************************
44 Creando una Vista para Recetas

*En Web.php:
Route::get('/recetas', 'RecetaController@index' )->name('recetas.index');

*En RecetaController:
{
  public function __invoke(Request $request)
  {
    return view('recetas.index');
  }
}

***************************************************************************************************************************************
45 Como pasar datos del controller a view

*En el controlador RecetaController:
class HomeController extends Controller
{
  public function __invoke(Request $request)
  {
    $recetas = ['Receta Pizza', 'Receta Hamburguesa', 'Receta Tacos'];

    return view('recetas.index')->with('recetas', $recetas);
    //OTRA FORMA
    return view('recetas.index', compact('recetas') );
  }
}

*En vista index.blade.php de la carpeta cerada recetas en Views
<h1>Recetas</h1>
@foreach ($recetas as $receta)      //nota $recetas = al nombre llave ->with('recetas', $recetas);
  <li>{{ $receta }}</li>
@endforeach

-----------------------------------------------------------------------------
SI SE QUIEREN PASAR MAS VARIABLES:
*En el controlador RecetaController:
class HomeController extends Controller
{
  public function __invoke(Request $request)
  {
    $recetas = ['Receta Pizza', 'Receta Hamburguesa', 'Receta Tacos'];
    $categorias = ['Comida Mexicana',  'Comida Argentina', 'Postres'];

    return view('recetas.index')->with('recetas', $recetas)->with('categorias', $categorias);
    //OTRA FORMA
    return view('recetas.index', compact('recetas', 'categorias') );
  }
}

*En vista index.blade.php de la carpeta cerada recetas en Views
<h1>Recetas</h1>
@foreach ($recetas as $receta)      //nota $recetas = al nombre llave ->with('recetas', $recetas);
  <li>{{ $receta }}</li>
@endforeach

<h2>Categorias</h2>
@foreach ($categorias as $categoria)      //nota $categorias = al nombre llave ->with('categorias', $categoria);
  <li>{{ $categoria }}</li>
@endforeach
-----------------------------------------------------------------------------


***************************************************************************************************************************************
46 CREAR LOGIN Y AUTENTICACION

composer require laravel/ui
php artisan lista
php artisan ui:auth (agrega en views->auth, views->layouts en migrations->create_users)

***************************************************************************************************************************************
47
-------------------------------------------------------------
MIGRACIONES
Control de versiones para la base de datos.
Permite odificar y compartir el schema de la base de datos en un equipo de trabajo.
Se puede generar la migracion al crear el Modelo.

php artisan make:model Clientes --migration
php artisan make:model Clientes --m

-------------------------------------------------------------

php artisan migrate
php artisan rollback (elimina todas las migraciones)


***************************************************************************************************************************************
48 AÑADIR BOOTSTRAP Y Vue

php artisan ui bootstrap
php artisan ui vue
npm install
npm run dev

(ver en resources->sass->_variables.scss)
(ver en resources->sass->app.scss)

***************************************************************************************************************************************
49 DIEÑO Y FUENTES
(ver en resources->sass->_variables.scss)

npm run watch

Para cambiar el diseño de la pagina de registro
resources->views->layouts->app.blade.php

En archivo .env se puede cambia el APP_NAME=Laravel
*nota: Cuando se hacen cambios en el archivo .env REINICIAR EL SERVIDOR

Como agregar fuentes de G
Se colocan en app.scss
ejemplo:
@import url('https://fonts.googleapis.com/css2?family=Didact+Gothic&family=Fredoka+One&display=swap');
Y en _variables modificar
// Typography
$font-family-sans-serif: 'Fredoka One', cursive;
$parrafos-font-family: 'Didact Gothic', sans-serif;

Se pueden crear hojas de estilos personalizadas por ejemplo:
_recetas.scss
Y luego importar en app.scss
//Archivo de recetas
@import 'recetas';

***************************************************************************************************************************************
50 REGISTAR PRIMER USUARIO

Se registra y manda a /home

--------------------------------------------
php artisan tinker
--------------------------------------------

En modelo User.php (Nota: ya esta el siguiente codigo y es lo que el usuario tiene que llenar)
protected $fillable = [
    'name', 'email', 'password'
];

--------------------------------------------

USANDO TINKER

php artisan tinker
>>$usuario = new User;
>>$usuario->name = "Luis 2";
>>$usuario (para ir viendo como se va generando el objeto)
>>$usuario->email = "luis@luis.com";
>>$usuario (para ir viendo como se va generando el objeto)
>>$usuario->password = Hash::make('el pass va aquí');
>>$usuario (para ir viendo como se va generando el objeto)

Finalmente para incertar en la base de datos:
>>$usuario->save();

Para salir de tinker:
>>exit

Para ver los usuarios con tinker:
php artisan tinker
>> User::all();

Para traer por id:
>>User::find(2);
-------------------------------------------------------------------

***************************************************************************************************************************************
51 AÑADIR CAMPOS EXTRAS AL FORMULARIO DE REGISTRO

Entrar en la migracion create_users
Agregar Campos por ejemplo: $table->string('url')->nullable();

php artisan migrate:rollback
php artisan migrate

En vista:
views->auth->register.blade.php
Se agrega el campo extra
*Nota: el name es que inserta en la base de datos

<div class="form-group row">
    <label for="url" class="col-md-4 col-form-label text-md-right">{{ __('Página web') }}</label>

    <div class="col-md-6">
        <input id="url" type="text" class="form-control @error('url') is-invalid @enderror" name="url" value="{{ old('url') }}" required autocomplete="url" autofocus>

        @error('url')
            <span class="invalid-feedback" role="alert">
                <strong>{{ $message }}</strong>
            </span>
        @enderror
    </div>
</div>

Al guardar manda un error, se coloca nullable en el campo url:
$table->string('url')->nullable();
php artisan migrate:rollback
php artisan migrate

---------------------------------------------------------------------------
SEGURIAD EN LARAVEL
Como laravel se enfoca en la seguridad no permite insertar la URL

php artisan migrate:fresh

*En el modelo de User.php
Se debe agregar en el fllable para que permita guardar en la base de datos
protected $fillable = [
    'name', 'email', 'password', 'url'
];

*En register.blade.php
Colocar  en el form "novalidate" para deshabilitar la validacion de HTML5 y
que la validacion la haga laravel

<form method="POST" action="{{ route('register') }}" novalidate>

*En RegisterController.php
{
    return Validator::make($data, [
        'name' => ['required', 'string', 'max:255'],
        'email' => ['required', 'string', 'email', 'max:255', 'unique:users'],
        'password' => ['required', 'string', 'min:8', 'confirmed'],
        'url' => ['required', 'string', 'url' ],
    ]);
}
protected function create(array $data)
{
    return User::create([
        'name' => $data['name'],
        'email' => $data['email'],
        'password' => Hash::make($data['password']),
        'url' => $data['url'],
    ]);
}

Nota: Si no se requiere que el campo sea OBLIGATORIO se quita del anterior
per se debe asegurar el nullable en la migracion ejemplo:
$table->string('url')->nullable();
---------------------------------------------------------------------------


***************************************************************************************************************************************
52 MODIFICAR URL REDIRECCIONAMIENTO

*En LoginController.php
protected $redirectTo = RouteServiceProvider::HOME;

*En RouteServiceProvider
//public const HOME = '/home';
public const HOME = '/recetas';

*En web.php
se puede comentar //Route::get('/home', 'HomeController@index')->name('home');
por que ya no se utilizara

----------------------------------------------------------------------
Heredar el diseño de resources->views->layouts->app.blade.php
*En recetas->index.blade.php
@extends('layouts.app')
@section('content')

@endsection

*En views->layouts->app.blade.php
@yield('content')
----------------------------------------------------------------------

como ya no se requiere __invoke en RecetaController se elimina

***************************************************************************************************************************************
53. RESOURCE CONTROLLERS

php artisan help make:controller
php artisan make:controller RecetaController -r

***************************************************************************************************************************************
54. CREANDO MIGRACION, MODELO Y CONTROLLER

Crear una migracion:
php artisan list (make:migration)
php artisan help make:migration
php artisan make:migration create_recetas_table
php artisan migrate (si se quire correr la migracion)
-php artisan migrate:rollback

Crear Modelo, migracion y controlador de tipo resource:
php artisan help make:model
php artisan make:model Receta -mcr (Nota: usualmente el modelo es en singular y con mayuscula)

***************************************************************************************************************************************
55. Metodo index

*En web.php
Route::get('/recetas', 'RecetaController@index' )->name('recetas.index');

*En RecetaController.php:
public function index()
{

    //Auth::user()->recetas->dd();
    //auth()->user()->recetas->dd();
    //PRIMERA FORMA
    //$usuario = auth()->user();// se agrega en cap 106
    //$recetas = auth()->user()->recetas; //se desabilito al poner recetas con paginacion cap 110

    //
    //auth()->user()->meGusta->dd();
    //$meGusta = auth()->user()->meGusta;

    // RECETAS CON PAGINACION
    //$usuario = auth()->user()->id; //se cambia en cap 120
    $usuario = auth()->user();

    $recetas = Receta::where('user_id', $usuario->id)->paginate(3);

    //PRIMERA FORMA
    // return view('recetas.index')->with('recetas', $recetas)->with('usuario', $usuario);   //PRIMERA FORMA
    //SEGUNDA FORMA (Como la original)
    return view('recetas.index')->with('recetas', $recetas)->with('usuario', $usuario);
}

***************************************************************************************************************************************
56. Metodo create

Agregar un boton para que nos mande a la pagina de crear desde la pagina 127.0.0.1/recetas (la del redireccionamiento)

*Abrir resources->views->layouts->app.blade.php
Agregar un @yield
Ejemplo:
<div class="container">
  <div class="row">
    <div class="py-4 mt-5 col-12">
        @yield('botones')
    </div>

    <main class="py-4 mt-5 col-12">
        @yield('content')
    </main>
  </div>
</div>
*En recetas->index.blade.php
Agregar:
@section('botones')
    {{-- SE PASA TODO ESTE CODIGO A ui.navegacion.blade.php y se coloca @include--}}
      @include('ui.navegacion')

    {{-- {{ Auth::user() }} --}} {{-- SEGUNDA FORMA --}}
    {{--
      <a href="{{ route('recetas.create') }}" class="btn btn-outline-primary mr-2 font-weight-bold">
        <svg class="icono" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 13h6m-3-3v6m5 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
        </svg>
      Crear Receta</a>
    --}}
      {{-- PRIMERA FORMA --}}
      {{-- <a href="{{ route('perfiles.edit', ['perfil' => $usuario->id ]) }}" class="btn btn-outline-success mr-2 font-weight-bold">Editar Perfil</a> --}}
      {{-- SEGUNDA FORMA con helpers si tener que modificar en receta controller como en la primera forma --}}
    {{--
      <a href="{{ route('perfiles.edit', ['perfil' => Auth::user()->id ]) }}" class="btn btn-outline-success mr-2 font-weight-bold">
        <svg class="icono" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
        </svg>
      Editar Perfil</a>
      <a href="{{ route('perfiles.show', ['perfil' => Auth::user()->id ]) }}" class="btn btn-outline-info mr-2 font-weight-bold">
        <svg class="icono" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5.121 17.804A13.937 13.937 0 0112 16c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0zm6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      Ver Perfil</a>
    --}}
@endsection

*En web.php:
Route::get('/recetas/create', 'RecetaController@create' )->name('recetas.create');

*En views->recetas crear archivo create.blade.php

---------------------------------------------------------------------------------
Nota: recordar como se enlaza el boton
se hace uso de *ROUTE NAME
<a href="{{ route('recetas.create') }}" class="btn btn-outline-primary mr-2 font-weight-bold">Crear Receta</a>
---------------------------------------------------------------------------------

***************************************************************************************************************************************
57. Crear Formulario

@section('content')

  <h2 class="text-center mb-5">Crear nueva Receta</h2>
  <!-- {{ $categorias }} -->

  <div class="row justify-content-center mt-5">
    <div class="col-md-8">
      <form method="POST" action="{{ route('recetas.store') }}" enctype="multipart/form-data" novalidate>
          @csrf
          <div class="form-group">
              <label for="titulo">Titulo Receta</label>

              <input type="text"
                  name="titulo"
                  class="form-control @error('titulo') is-invalid @enderror "
                  id="titulo"
                  placeholder="Titulo Receta"
                  value={{ old('titulo') }}
              >
              @error('titulo')
                <span class="invalid-feedback d-block" role="alert">
                  <strong>{{$message}}</strong>
                </span>
              @enderror
          </div>

          <div class="from-group">
              <label for="categoria">Categoría</label>
              <select
                  class="form-control @error('categoria') is-invalid @enderror"
                  name="categoria"
                  id="categoria"
              >
                  <option value="">--Seleccione --</option>
                  @foreach ($categorias as $id => $categoria)
                    <option
                        value="{{ $id }}"
                        {{ old('categoria') == $categoria->id ? 'selected' : '' }}
                        >{{$categoria}}</option>
                  @endforeach
              </select>
              @error('categoria')
                <span class="invalid-feedback d-block" role="alert">
                  <strong>{{$message}}</strong>
                </span>
              @enderror
          </div>

          <div class="form group mt-3">
            <label for="preparacion">Preparación</label>
            <input id="preparacion" type="hidden" name="preparacion" value="{{ old('preparacion') }}">
            <trix-editor
              class="form-control @error('preparacion') is-invalid @enderror"
              input="preparacion"
            ></trix-editor>
            @error('preparacion')
              <span class="invalid-feedback d-block" role="alert">
                <strong>{{$message}}</strong>
              </span>
            @enderror
          </div>

          <div class="form group mt-3">
            <label for="ingredientes">Ingredientes</label>
            <input id="ingredientes" type="hidden" name="ingredientes" value="{{ old('ingredientes') }}">
            <trix-editor
              class="form-control @error('ingredientes') is-invalid @enderror"
              input="ingredientes"
            ></trix-editor>
            @error('ingredientes')
              <span class="invalid-feedback d-block" role="alert">
                <strong>{{$message}}</strong>
              </span>
            @enderror
          </div>

          <div class="form group mt-3">
            <label for="imagen">Elige la Imagen</label>
            <input
                id="imagen"
                type="file"
                name="imagen"
                class="form-control @error('imagen') is-invalid @enderror"
            >
            @error('imagen')
              <span class="invalid-feedback d-block" role="alert">
                <strong>{{$message}}</strong>
              </span>
            @enderror
          </div>

          <div class="form-group">
            <input type="submit" class="btn btn-primary" value="Agregar Receta">
          </div>
      </form>
    </div>
  </div>

@endsection
***************************************************************************************************************************************
58. REGISTAR RUTA PARA ALMACENAR (STORE)

*EN web.php
Route::post('/recetas', 'RecetaController@store' )->name('recetas.store');

*En views->recetas->create.blade.php
<form method="POST" action="{{ route('recetas.store') }}" enctype="multipart/form-data" novalidate>

*En RecetaController
public function store(Request $request)
{
    dd ( $request->all() );
}

---------------------------------------------------------------------------
SEGURIAD EN LARAVEL
Si se revisa resources->views->layouts->app.blade.php Se nota que tiene:
<!-- CSRF Token -->
<meta name="csrf-token" content="{{ csrf_token() }}">

entonces en el form se coloca lo siguiente: @csrf
ejemplo:
<form method="POST" action="{{ route('recetas.store') }}" enctype="multipart/form-data" novalidate>
    @csrf

Y ya se puede leer en el
  dd ( $request->all() );
---------------------------------------------------------------------------
***************************************************************************************************************************************
59. GUARDAR DATOS EN LA BD SIN MODELO

*En RecetaController SE AGRAGAN LOS FACADES
public function store(Request $request)
{
    //dd( $request->all() ); Funciona como vardump

    $data = $request->();

    // amacenar en la bd (sin modelo)
    DB::table('recetas')->insert([
        'titulo' => $data['titulo']
    ]);

    // Redireccionar
    return redirect()->action('RecetaController@index');
}

*En RecetaController
SE DEBE IMPORTAR use Illuminate\Support\Facades\DB;

***************************************************************************************************************************************
60. VALIDACION DE FORMULARIOS

*En views->recetas->create.blade.php agregar novalidate:
<form method="POST" action="{{ route('recetas.store') }}" enctype="multipart/form-data" novalidate>

*En RecetaController SE AGRAGAN LOS FACADES
public function store(Request $request)
{
    //dd( $request->all() ); Funciona como vardump

    $data = $request->validate([
      'titulo' => 'required|min:6',
      'preparacion' => 'required',
      'ingredientes' => 'required',
      'imagen' => 'required|image',
      'categoria' => 'required'
    ]);

    // amacenar en la bd (sin modelo)
    DB::table('recetas')->insert([
        'titulo' => $data['titulo'],
        'preparacion' => $data['preparacion'],
        'ingredientes' => $data['ingredientes'],
            //'imagen' => 'imagen.jpg',
        'imagen' => $ruta_imagen,
        'user_id' => Auth::user()->id,
        'categoria_id' => $data['categoria']
    ]);

    // Redireccionar
    return redirect()->action('RecetaController@index');
}

*En views->recetas->create.blade.php colocar directivas @error:
<div class="form-group">
    <label for="titulo">Titulo Receta</label>
    <input type="text"
        name="titulo"
        class="form-control @error('titulo') is-invalid @enderror "
        id="titulo"
        placeholder="Titulo Receta"
        value={{ old('titulo') }}
    >
    @error ('titulo')
      <span class="invalid-feedback d-block" role="alert">
        <strong>{{$message}}</strong>
      </span>
    @enderror
</div>

***************************************************************************************************************************************
61. TRADUCIR LARAVEL A ESPAÑOL

composer require laraveles/spanish
php artisan list (laraveles:install-lang)
php artisan laraveles:install-lang

*En config->app.php
'locale' => 'es',

***************************************************************************************************************************************
62. URL PROTEGIDAS (middleware)

*En RecetaController:
public function __construct()
{
  //$this->middleware('auth');
  $this->middleware('auth', ['except' => ['show', 'search']]);
}
***************************************************************************************************************************************
63. MIGRACION CATEGORIA_RECETAS Y RECETAS

$table->unsignedBigInteger('user_id')->index('user_id')->comment('El usuario que crea la receta');
$table->unsignedBigInteger('categoria_id')->index('categoria_id')->comment('La categoria de la receta');
vs
$table->foreignId('user_id')->references('id')->on('users')->comment('El usuario que crea la receta');
$table->foreignId('categoria_id')->index('id')->on('categoria_recetas')->comment('La categoria de la receta');

*En terminal:
php artisan migrate:fresh (Elimina lo que tenemos y vuelve a correr las migraciones)

Agregar oto create en create_recetas_tablerecetas
public function up()
{
    Schema::create('categoria_recetas', function (Blueprint $table) {
      $table->id();
      $table->string('nombre');
      $table->timestamps();
    });

    Schema::create('recetas', function (Blueprint $table) {
        $table->id();
        $table->string('titulo');
        $table->text('ingredientes');
        $table->text('preparacion');
        $table->string('imagen');
        $table->foreignId('user_id')->references('id')->on('users')->comment('El usuario que crea la receta');
        $table->foreignId('categoria_id')->index('id')->on('categoria_recetas')->comment('La categoria de la receta');
        $table->timestamps();
    });
}

public function down()
{
    Schema::dropIfExists('categoria_recetas');
    Schema::dropIfExists('recetas');
}
***************************************************************************************************************************************
64. SEED
LLenar base con datos por default.

php artisan list (make:seeder)
php artisan help make:seeder
php artisan make:seeder
php artisan make:seeder CategoriasSeeder

*En archivo CategoriasSeeder.php
DB::table('categoria_recetas')->insert([
  'nombre' => 'Comida Mexicana',
  'created_at' => date('Y-m-d H:i:s'),
  'updated_at' => date('Y-m-d H:i:s'),
]);

*En archivo DatabaseSeeder.php
public function run()
{
    // $this->call(UserSeeder::class);
    $this->call(CategoriasSeeder::class);
}

Correr el Seed:
php artisan db:seed

***************************************************************************************************************************************
65. Creando Segundo seeder

*En archivo CategoriasSeeder.php
DB::table('users')->insert([
  'name' => 'Luis',
  'email' => 'correo@correo.com',
  'password' => Hash::make('12345678'),
  'url' => 'http://blognotacuriosa.com',
  'created_at' => date('Y-m-d H:i:s'),
  'updated_at' => date('Y-m-d H:i:s'),
]);

*En archivo DatabaseSeeder.php
public function run()
{
    // $this->call(UserSeeder::class);
    $this->call(CategoriasSeeder::class);
    $this->call(UsuarioSeeder::class);
}

Correr el Seed:
php artisan db:seed
***************************************************************************************************************************************
How can I pass variable to register view?
https://stackoverflow.com/questions/42336115/how-can-i-pass-variable-to-register-view
***************************************************************************************************************************************
66. Pasando las Categorias a la BD (READ-LEER) SIN MODELO - METODO PLUCK

*En RecetaController:
public function create()
{
    //DB::table('categoria_recetas')->get()->dd(); //METODO get
    //DB::table('categoria_recetas')->get()->pluck('nombre', 'id')->dd(); //METODO pluck
    //Obtener las categorias (sin modelo)
    $categorias = DB::table('categoria_recetas')->get()->pluck('nombre', 'id');

    return view('recetas.create')->with('categorias', $categorias);
}

*En vews->recetas->create.blade.php //Imprimir las categorias
<h2 class="text-center mb-5">Crear nueva Receta</h2>
 {{ $categorias }}

-----------------------------------------------------------------------------
 <div class="from-group">
     <label for="categoria">Categoría</label>
     <select
         class="form-control"
         name="categoria"
         id="categoria"
     >
         @foreach ($categorias as $id => $categoria)
           <option
               value="{{ $id }}">{{$categoria}}</option>
         @endforeach
     </select>
 </div>
-----------------------------------------------------------------------------

***************************************************************************************************************************************
67. Validar seleccion de categoria (SELECTOR) SIN MODELO

-----------------------------------------------------------------------------
*En RecetaController:
public function store(Request $request)
{
    //validación
    $data = $request->validate([
      'titulo' => 'required|min:6',
      'categoria' => 'required'
    ]);


    //almacenar en la bd (sin modelo)
    DB::table('recetas')->insert([
        'titulo' => $data['titulo'],
    ]);

    // Redireccionar
    return redirect()->action('RecetaController@index');
}
-----------------------------------------------------------------------------
*En vews->recetas->create.blade.php
<div class="from-group">
    <label for="categoria">Categoría</label>
    <select
        class="form-control @error('categoria') is-invalid @enderror"
        name="categoria"
        id="categoria"
    >
        <option value="">--Seleccione --</option>
        @foreach ($categorias as $id => $categoria)
          <option
              value="{{ $id }}"
              {{ old('categoria') == $id ? 'selected' : '' }}
              >{{$categoria}}</option>
        @endforeach
    </select>
    @error('categoria')
      <span class="invalid-feedback d-block" role="alert">
        <strong>{{$message}}</strong>
      </span>
    @enderror
</div>
-----------------------------------------------------------------------------
***************************************************************************************************************************************
68. AGREGANDO TRIX EDITOR
https://github.com/basecamp/trix
https://cdnjs.com/libraries/trix

-----------------------------------------------------------------------------
*En views->layouts->app.blade.php
<!-- Se agrega para trix editor cap 68-->
@yield('styles')

<!-- Styles -->

@yield('scripts')
</body>
</html>
-----------------------------------------------------------------------------
*En vews->recetas->create.blade.php
@extends('layouts.app')

@section('styles')
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/trix/1.2.4/trix.css" integrity="sha512-qjOt5KmyILqcOoRJXb9TguLjMgTLZEgROMxPlf1KuScz0ZMovl0Vp8dnn9bD5dy3CcHW5im+z5gZCKgYek9MPA==" crossorigin="anonymous" />
@endsection

@section('scripts')
  <script src="https://cdnjs.cloudflare.com/ajax/libs/trix/1.2.4/trix.js" integrity="sha512-zEL66hBfEMpJUz7lHU3mGoOg12801oJbAfye4mqHxAbI0TTyTePOOb2GFBCsyrKI05UftK2yR5qqfSh+tDRr4Q==" crossorigin="anonymous" defer></script>
@endsection
-----------------------------------------------------------------------------
*En views->recetas->create.blade.php
*IMPORTANTE type="hidden" PARA TRIX
<div class="form group mt-3">
  <label for="preparacion">Preparación</label>
  <input id="preparacion" type="hidden" name="preparacion" value="{{ old('preparacion') }}">
  <trix-editor
    class="form-control @error('preparacion') is-invalid @enderror"
    input="preparacion"
  ></trix-editor>
  @error('preparacion')
    <span class="invalid-feedback d-block" role="alert">
      <strong>{{$message}}</strong>
    </span>
  @enderror
</div>
-----------------------------------------------------------------------------
*En resources->sass->_recetas.scss
trix-editor {
    height: auto!important;
    min-height: 400px;
}

-----------------------------------------------------------------------------
VALIDACION
*En RecetaController:
public function store(Request $request)
{
    //validación
    $data = $request->validate([
      'titulo' => 'required|min:6',
      'categoria' => 'required',
      'preparacion' => 'required',
      'ingredientes' => 'required',
    ]);

    //almacenar en la bd (sin modelo)
    DB::table('recetas')->insert([
        'titulo' => $data['titulo']
    ]);

    // Redireccionar
    return redirect()->action('RecetaController@index');
}
-----------------------------------------------------------------------------
*En views->recetas->create.blade.php
@error('preparacion')
  <span class="invalid-feedback d-block" role="alert">
    <strong>{{$message}}</strong>
  </span>
@enderror

***************************************************************************************************************************************
69. AGREGANDO CAMPO PARA IMAGEN
-----------------------------------------------------------------------------
*En views->recetas->create.blade.php
<div class="form group mt-3">
  <label for="imagen">Elige la Imagen</label>
  <input
      id="imagen"
      type="file"
      name="imagen"
      class="form-control @error('imagen') is-invalid @enderror"
  >
  @error('imagen')
    <span class="invalid-feedback d-block" role="alert">
      <strong>{{$message}}</strong>
    </span>
  @enderror
</div>
-----------------------------------------------------------------------------
VALIDACION
*En RecetaController:
public function store(Request $request)
{
    //validación
    $data = $request->validate([
      'titulo' => 'required|min:6',
      'categoria' => 'required',
      'preparacion' => 'required',
      'ingredientes' => 'required',
      'imagen' => 'required|image|size:1000'
    ]);

    //almacenar en la bd (sin modelo)
    DB::table('recetas')->insert([
        'titulo' => $data['titulo']
    ]);

    // Redireccionar
    return redirect()->action('RecetaController@index');
}
-----------------------------------------------------------------------------

***************************************************************************************************************************************
70. GUARDAR EN LA BD
-----------------------------------------------------------------------------
*En RecetaController:
public function store(Request $request)
{
    //validación
    $data = $request->validate([
      'titulo' => 'required|min:6',
      'preparacion' => 'required',
      'ingredientes' => 'required',
      //'imagen' => 'required|image|size:1000', // de momento se comenta para probar los otros campos
      'categoria' => 'required',
    ]);

    //almacenar en la bd (sin modelo)
    DB::table('recetas')->insert([
        'titulo' => $data['titulo'],
        'preparacion' => $data['preparacion'],
        'ingredientes' => $data['ingredientes'],
        'imagen' => 'imagen.jpg' // De momento se pone manual se tiene que mandar algo
        'user_id' => 1, //De momento se coloca 1 por que no es nullable y se tiene que mandar algo
        'categoria_id' => $data['categoria']
    ]);

    // Redireccionar
    return redirect()->action('RecetaController@index');
}
-----------------------------------------------------------------------------
COMO OBTENER EL user_id USANDO HELPERS  PARA INSERTAR EN LA BD
*En RecetaController:

'user_id' => Auth::user()->id,

Se importa la clase:
use Illuminate\Support\Facades\Auth;

Entonces quedaria como sigue:

//almacenar en la bd (sin modelo)
DB::table('recetas')->insert([
    'titulo' => $data['titulo'],
    'preparacion' => $data['preparacion'],
    'ingredientes' => $data['ingredientes'],
    'imagen' => 'imagen.jpg' // De momento se pone manual se tiene que mandar algo
    'user_id' => Auth::user()->id,
    'categoria_id' => $data['categoria']
]);
-----------------------------------------------------------------------------

***************************************************************************************************************************************
71. ALMACENAR IMAGENES EN EL SERVIDOR
-----------------------------------------------------------------------------
*En RecetaController:
public function store(Request $request)
{
    //dd( $request->all() );
    //dd( $request->['imagen'] );
    //dd( $request['imagen']->store('upload-recetas', 'public') );
    //si queremos guardar en AWS
    //dd( $request['imagen']->store('upload-recetas', 'aws') );

    dd( $request['imagen']->store('upload-recetas', 'public') );

    //validación
    $data = $request->validate([
      'titulo' => 'required|min:6',
      'preparacion' => 'required',
      'ingredientes' => 'required',
      //'imagen' => 'required|image|size:1000', // de momento se comenta para probar los otros campos
      'categoria' => 'required',
    ]);

    //almacenar en la bd (sin modelo)
    DB::table('recetas')->insert([
        'titulo' => $data['titulo'],
        'preparacion' => $data['preparacion'],
        'ingredientes' => $data['ingredientes'],
        'imagen' => 'imagen.jpg' // De momento se pone manual se tiene que mandar algo
        'user_id' => Auth::user()->id,
        'categoria_id' => $data['categoria']
    ]);

    // Redireccionar
    return redirect()->action('RecetaController@index');
}
-----------------------------------------------------------------------------
*En views->recetas->create.blade.php agregar enctype="multipart/form-data"
<form method="POST" action="{{ route('recetas.store') }}" enctype="multipart/form-data" novalidate>
@csrf

Nota: se guarda en storage->app->public->upload-recetas
-----------------------------------------------------------------------------
COMO HACER VISIBLE LA IMAGEN CON STORAGE:LINK
php artisan list (storage:link)
php artisan storage:link
-----------------------------------------------------------------------------
*En RecetaController:
public function store(Request $request)
{
    //dd( $request->all() );
    //dd( $request->['imagen'] );
    //dd( $request['imagen']->store('upload-recetas', 'public') );
    //si queremos guardar en AWS
    //dd( $request['imagen']->store('upload-recetas', 'aws') );
    //dd( $request['imagen']->store('upload-recetas', 'public') );

    //validación
    $data = $request->validate([
      'titulo' => 'required|min:6',
      'preparacion' => 'required',
      'ingredientes' => 'required',
      //'imagen' => 'required|image|size:1000', // de momento se comenta para probar los otros campos
      'categoria' => 'required',
    ]);

    //Obtener la ruta de la imagen
    $ruta_imagen = $request['imagen']->store('upload-recetas', 'public');

    //almacenar en la bd (sin modelo)
    DB::table('recetas')->insert([
        'titulo' => $data['titulo'],
        'preparacion' => $data['preparacion'],
        'ingredientes' => $data['ingredientes'],
        //'imagen' => 'imagen.jpg' // De momento se pone manual se tiene que mandar algo
        'imagen' => $ruta_imagen,
        //'user_id' => 1, //De momento se coloca 1 por que no es nullable y se tiene que mandar algo
        'user_id' => Auth::user()->id,
        'categoria_id' => $data['categoria']
    ]);

    // Redireccionar
    return redirect()->action('RecetaController@index');
}
-----------------------------------------------------------------------------
***************************************************************************************************************************************
72 EFECTOS EN LAS IMAGENES CON Intervention Image

composer require intervention/image

*En RecetaController: Se importa
use Intervention\Image\Facades\Image;
-----------------------------------------------------------------------------
*En RecetaController:
public function store(Request $request)
{
    //dd( $request->all() );
    //dd( $request->['imagen'] );
    //dd( $request['imagen']->store('upload-recetas', 'public') );
    //si queremos guardar en AWS
    //dd( $request['imagen']->store('upload-recetas', 'aws') );
    //dd( $request['imagen']->store('upload-recetas', 'public') );

    //validación
    $data = $request->validate([
      'titulo' => 'required|min:6',
      'preparacion' => 'required',
      'ingredientes' => 'required',
      //'imagen' => 'required|image|size:1000', // de momento se comenta para probar los otros campos
      'categoria' => 'required',
    ]);

    //Obtener la ruta de la imagen
    $ruta_imagen = $request['imagen']->store('upload-recetas', 'public');

    // Resize de la imagen
          $img = Image::make( public_path("storage/{$ruta_imagen}"))->fit(1000, 550);
          $img->save();

    //almacenar en la bd (sin modelo)
    DB::table('recetas')->insert([
        'titulo' => $data['titulo'],
        'preparacion' => $data['preparacion'],
        'ingredientes' => $data['ingredientes'],
        //'imagen' => 'imagen.jpg' // De momento se pone manual se tiene que mandar algo
        'imagen' => $ruta_imagen,
        //'user_id' => 1, //De momento se coloca 1 por que no es nullable y se tiene que mandar algo
        'user_id' => Auth::user()->id,
        'categoria_id' => $data['categoria']
    ]);

    // Redireccionar
    return redirect()->action('RecetaController@index');
}
-----------------------------------------------------------------------------
***************************************************************************************************************************************

***************************************************************************************************************************************
73. ELOQUENT (AQUI EMPIEZA CRUD DE RECETAS "C")

Es el ORM de Laravel y permite conectar  los objetos de una aplicación con las
tablas en una base de datos. Gracias a un ORM es fácil realizar las operaciones
en la Base de Datos en lugar de escribir código SQL.

Funciona sobre la M del MVC

FUNCIONES RELACIONES:

1:1 -> hasOne
1:n -> hasMany
n:n -> belongsToMany

1:1 -> belongsTo
1:n -> belongsTo
n:n -> belongsToMany

-------------------------------------------------------------------------------
https://pathros.blogspot.com/2018/07/laravel-diferencia-entre-hasone-y.html

Primero hay que averiguar cuál de las dos tablas tiene la columna relacional;
es decir, 'relacion_id'.  Quien tenga tal columna, en el modelo correspondiente va la función belongsTo().
Y en la otra, entonces, irá la de hasOne().
-------------------------------------------------------------------------------


***************************************************************************************************************************************
74. CREANDO RELACION 1:n USUARIOS Y RECETAS (un usuario muchas recetas)

*En Modelo User.php (no requiere hacer import)
/** Relacion 1:n de Usuarios a recetas **/
public function recetas()
{
  return $this->hasMany(Receta::class);
}

*Nota: reiniciar servidor

*En terminal:
php artisan tinker
>> $usuario = User::find(1);
>> $usuario;
>> $usuario->recetas; (nos trae las recetas de este usuario(1))

***************************************************************************************************************************************
75. OBTENER LAS RECETAS CREADAS POR UN USUARIO CON ELOQUENT

-------------------------------------------------------------------------------
*En RecetaController:
public function index()
{
    //Auth::user()->recetas->dd(); //Nota: es recetas por que en el Modelo User.php se la funcion se llama recetas
    //otra forma es:
    //auth()->user()->recetas->dd();

    $recetas = auth()->user()->recetas;

    return view('recetas.index')->with('recetas', $recetas);
}
-------------------------------------------------------------------------------
*En views->recetas->index.blade.php
<h2 class="text-center mb-5">Administra tus Recetas</h2>
<!-- {{ $recetas }}  // para visualizar lo que se pasa de la base de datos-->

<div class="col-md-10 mx-auto bg-white p-3">
<table class="table">
    <thead class="bg-primary text-ligth">
      <tr>
        <th scole="col">Titulo</th>
        <th scole="col">Categorias</th>
        <th scole="col">Acciones</th>
      </tr>
    </thead>

    <tbody>

      @foreach ($recetas as $receta)
      <tr>
        <td> {{$receta->titulo}} </td>
        <td> {{$receta->categoria_id}} </td> //NOTA: EN CATEGORIA APARECE EL NUMERO ID PERO PARA MOSTRAR EL NOMBRE SE CREA OTRA RELACION
        <td>
            <a href="" class="btn btn-danger mr-1">Eliminar</a>
            <a href="" class="btn btn-dark mr-1">Editar</a>
            <a href="" class="btn btn-success mr-1">Ver</a>
        </td>
      </tr>
      @endforeach

    </tbody>
</table>
</div>
-------------------------------------------------------------------------------
//NOTA: EN CATEGORIA APARECE EL NUMERO ID PERO PARA MOSTRAR EL NOMBRE SE CREA OTRA RELACION
***************************************************************************************************************************************
76. CREANDO MODELO PARA LAS CATEGORIAS (vs 67. SIN MODELO)

php artisan make:model CategoriaReceta //ya se tiene la migracion asi que solo se crea el Modelo

-------------------------------------------------------------------------------
*En RecetaController importar CategoriaReceta
use App\CategoriaReceta;
-------------------------------------------------------------------------------
*En RecetaController:
public function create()
{
    //DB::table('categoria_recetas')->get()->dd(); //METODO get
    //DB::table('categoria_recetas')->get()->pluck('nombre', 'id')->dd(); //METODO pluck

    //Obtener las categorias (sin modelo)
    //$categorias = DB::table('categoria_recetas')->get()->pluck('nombre', 'id');

    //Obtener las categorias (Con modelo)
      $categorias = CategoriaReceta::all(['id', 'nombre']);

    return view('recetas.create')->with('categorias', $categorias);
}
-------------------------------------------------------------------------------
*En vews->recetas->create.blade.php
<div class="from-group">
    <label for="categoria">Categoría</label>
    <select
        class="form-control @error('categoria') is-invalid @enderror"
        name="categoria"
        id="categoria"
    >
        <option value="">--Seleccione --</option>
        @foreach ($categorias as $categoria)
          <option
              value="{{ $categoria->id }}"
              {{ old('categoria') == $categoria->id ? 'selected' : '' }}
              >{{$categoria->nombre}}</option>
        @endforeach
    </select>
    @error('categoria')
      <span class="invalid-feedback d-block" role="alert">
        <strong>{{$message}}</strong>
      </span>
    @enderror
</div>
-------------------------------------------------------------------------------
***************************************************************************************************************************************
77. CREANDO RELACION 1:1 ENTRE RECETAS Y CATEGORIA (//NOTA: EN CATEGORIA APARECE EL NUMERO ID PERO PARA MOSTRAR EL NOMBRE SE CREA OTRA RELACION)

*En Modelo Receta.php (no requiere hacer import)
// Obtiene la categoria de la receta  via FK (foranea)
public function categoria()
{
  return $this->belongsTo(CategoriaReceta::class);
}

*Nota: Ver Imagen Relaciones (Este numero en recetas pertenece al numero de la tabla de categorias // es una receta la que tiene una categoria)
*Nota: reiniciar servidor
-------------------------------------------------------------------------------
php artisan tinker
$receta = Receta::find(1);
$receta->categoria
-------------------------------------------------------------------------------
*En views->recetas->index.blade.php
<h2 class="text-center mb-5">Administra tus Recetas</h2>
<!-- {{ $recetas }}  // para visualizar lo que se pasa de la base de datos-->

<div class="col-md-10 mx-auto bg-white p-3">
<table class="table">
    <thead class="bg-primary text-ligth">
      <tr>
        <th scole="col">Titulo</th>
        <th scole="col">Categorias</th>
        <th scole="col">Acciones</th>
      </tr>
    </thead>

    <tbody>

      @foreach ($recetas as $receta)
      <tr>
        <td> {{$receta->titulo}} </td>
        <td> {{$receta->categoria->nombre}} </td> //NOTA: SE HA REALIZADO LA RELACION EN MODELO Receta.php (categoria) REVISAR CONTRA 75.
        <td>
            <a href="" class="btn btn-danger mr-1">Eliminar</a>
            <a href="" class="btn btn-dark mr-1">Editar</a>
            <a href="" class="btn btn-success mr-1">Ver</a>
        </td>
      </tr>
      @endforeach

    </tbody>
</table>
</div>
-------------------------------------------------------------------------------

***************************************************************************************************************************************
78. GUARDAR RECETAS CON MODELO ("C")   //COMPARAR CON 70 Y 72

-----------------------------------------------------------------------------
php artisan tinker
$usuario = User::find(1);
$usuario->recetas
-----------------------------------------------------------------------------
Se importo la clase: (ver 70)
use Illuminate\Support\Facades\Auth;
-----------------------------------------------------------------------------
*En RecetaController:
public function store(Request $request)
{
    //dd( $request->all() );
    //dd( $request->['imagen'] );
    //dd( $request['imagen']->store('upload-recetas', 'public') );
    //si queremos guardar en AWS
    //dd( $request['imagen']->store('upload-recetas', 'aws') );
    //dd( $request['imagen']->store('upload-recetas', 'public') );

    //validación
    $data = $request->validate([
      'titulo' => 'required|min:6',
      'preparacion' => 'required',
      'ingredientes' => 'required',
      //'imagen' => 'required|image|size:1000', // de momento se comenta para probar los otros campos
      'categoria' => 'required',
    ]);

    //Obtener la ruta de la imagen
    $ruta_imagen = $request['imagen']->store('upload-recetas', 'public');

    // Resize de la imagen
          $img = Image::make( public_path("storage/{$ruta_imagen}"))->fit(1000, 550);
          $img->save();

    //almacenar en la bd (CON modelo)
          auth()->user()->recetas()->create([
              'titulo' => $data['titulo'],
              'preparacion' => $data['preparacion'],
              'ingredientes' => $data['ingredientes'],
              'imagen' => $ruta_imagen,
              'categoria_id' => $data['categoria']
          ]);

    // Redireccionar
    return redirect()->action('RecetaController@index');
}
-----------------------------------------------------------------------------
SEGURIAD EN LARAVEL
*En Modelo Receta.php
// Campos que se llenaran
protected $fillable = [
    'titulo', 'preparacion', 'ingredientes', 'imagen', 'categoria_id'
];
-----------------------------------------------------------------------------

***************************************************************************************************************************************
SEC. 9 MOSTRANDO RECETAS (CRUD "R")
79. METODO SHOW

*En web.php
Route::get('/recetas/{receta}', 'RecetaController@show' )->name('recetas.show');
{receta} esta variable debe ser la misma que en el modelo en singular Modelo: Receta

-----------------------------------------------------------------------------
*En RecetaController
public function show(Receta $receta)
{
  return "desde el metodo show";
}
Para probar poner 127.0.0.1:8000/recetas/1 (por que esta conectado al id de la Receta)

Se pruebacomo sigue para recibir la informacion de la base de datos:
public function show(Receta $receta)
{
  return $receta;
}
Para probar poner 127.0.0.1:8000/recetas/2 (por que esta conectado al id de la Receta)
-----------------------------------------------------------------------------

//ALGUNOS METODOS PARA OBTENER UNA RECETA
public function show($receta)
{
//Algunos métodos para obtener una recetas nota: se pone el public function show($receta) cap 79
    $receta = Receta::find($receta);
    //$receta = Receta::findOrFail($receta);
  return $receta;
}

-----------------------------------------------------------------------------

SE CREA UNA NUEVA VISTA EN recetas->show.blade.php

-----------------------------------------------------------------------------
*En RecetaController
public function show(Receta $receta)
{
  return view('recetas.show', compact('receta'));
}
-----------------------------------------------------------------------------
*En views->recetas->show.blade.php
@extends ('layouts.app')
@section('content')
  <h1>{{ $receta }}</h1>
@endsection
-----------------------------------------------------------------------------
***************************************************************************************************************************************
80. CREANDO LA VISTA Y MOSTRANDO LA INFORMACION

-----------------------------------------------------------------------------
*En views->recetas->show.blade.php
@extends ('layouts.app')
@section('content')
  {{-- <h1>{{ $receta }}</h1> --}}
  <article class="contenido-receta bg-white p-5 shadow">
      <h1 class="text-center mb-4">{{$receta->titulo}}</h1>
      <div class="imagen-receta">
          <img src="/storage/{{ $receta->imagen }}" class="w-100">
      </div>
      <div class="receta-meta mt-3">
          <p>
            <span class="font-weight-bold text-primary">Escrito en:</span>
            <a class="text-dark" href="{{ route('categorias.show', ['categoriaReceta' => $receta->categoria->id]) }}">
              {{$receta->categoria->nombre}}
            </a>
          </p>
          <p>
            <span class="font-weight-bold text-primary">Autor:</span>
            {{-- TODO: Mostrar el usuario --}}
            {{-- {{$receta->user_id}} --}}
            <a class="text-dark" href="{{ route('perfiles.show', ['perfil' => $receta->autor->id]) }}">
              {{$receta->autor->name}}
            </a>
          </p>
          <p>
            <span class="font-weight-bold text-primary">Fecha:</span>
            @php
              $fecha = $receta->created_at
            @endphp
            <fecha-receta fecha="{{$fecha}}"></fecha-receta>
          </p>
          <div class="ingredientes">
              <h2 class="my-3 text-primary">Ingredientes</h2>
              {!! $receta->ingredientes !!}
          </div>
          <div class="preparacion">
              <h2 class="my-3 text-primary">Preparación</h2>
              {!! $receta->preparacion !!}
          </div>

          <div class="justify-content-center row text-center">
              {{-- {{$likes}} --}}
              {{-- {{$like}} --}}
              <like-button
                  receta-id="{{$receta->id}}"
                  like="{{$like}}"
                  likes="{{$likes}}"
              ></like-button>
          </div>


      </div>
  </article>
@endsection
-----------------------------------------------------------------------------
NOTAS:

Comentarios en BLADE
{{-- TODO: Mostrar el usuario --}}

Para la imagen:
<img src="/storage/{{ $receta->imagen }}" class="w-100">

Para quitar el html que viene de la base de datos:
{!! $receta->ingredientes !!}

Para la fecha: Agregar MomentJS
***************************************************************************************************************************************
81. LIBRERIAS EXTERNAS MomentJS

Nota: otra alternativa es: date-fns

En terminal donde esta el package.json:
npm i --save moment

Para integrar a laravel (librerias como axios, momentjs):
abrir resources->js->bootstrap
// Instalar Momentjs
window.moment = require('moment');

Importante: npm run watch


***************************************************************************************************************************************
82. Moment y VueJS

En el resources->js->app
Se tiene la instancia de VueJS y ejemplo ExampleComponent.vue

Nota: Desde el principio elegir vue o react

*En el resources->js->app
Vue.component('fecha-receta', require('./components/FechaReceta.vue').default); // El default significa
que como se esta usando la sintaxis de comon.js (node), pero como va a ser un componente ECMAScript v6
por lo tanto  MIX de laravel se encarga de mezclar (php, sass, webpack, vuejs, jquery etc.)

*En resources->js->components crear:
FechaReceta.vue

*En views->recetas->show.blade.php
<fecha-receta"></fecha-receta>

*En resources->js->components->FechaReceta.vue
<template>
    <p>Esto es visible</p>
</template>

-----------------------------------------------------------------------------
*En views->recetas->show.blade.php
@php
  $fecha = $receta->created_at
@endphp
<fecha-receta fecha="{{$fecha}}"></fecha-receta>
-----------------------------------------------------------------------------
*En resources->js->components->FechaReceta.vue
<template>
    <!-- <span v-text="formatearFecha"></span> -->
    <span>{{ formatearFecha }}</span>
</template>

<script>
  export default {

    props: ['fecha'],

    //mounted() {
    //  console.log('la fecha es', this.fecha );
    //},

    computed: {
      formatearFecha() {
        return moment(this.fecha).locale('es').format('DD [de] MMMM [del] YYYY')
      }
    }
  }
</script>
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
***************************************************************************************************************************************
83. CREAR UNA NUEVA RELACION PARA MOSTAR EL AUTOR

-----------------------------------------------------------------------------
*En Modelo Receta.php
// Obtiene la información del usuario vía FK
public function autor()
{
  return $this->belongsTo(User::class, 'user_id'); // 'user_id' FK de esta tabla
}
-----------------------------------------------------------------------------

Nota: 'user_id'); // 'user_id' FK de esta tabla

php artisan tinker
>> $receta = Receta::find(3);
>> $receta->autor

-----------------------------------------------------------------------------
*En views->recetas->show.blade.php
<p>
  <span class="font-weight-bold text-primary">Autor:</span>
    {{$receta->autor->name}}
</p>
-----------------------------------------------------------------------------
***************************************************************************************************************************************
84. MOSTRAR LAS RECETAS A USUARIOS NO AUTENTICADOS (URL'S PROTEGIDAS)
(deben de ser publicas)

*En RecetaController
public function __construct()
{
  $this->middleware('auth', ['except' => ['show', 'search']]);
}

***************************************************************************************************************************************
85. Agregar un enlace para VER recetas desde el panel (ROUTE O ACTION)

-----------------------------------------------------------------------------
*En views->recetas->index.blade.php
<h2 class="text-center mb-5">Administra tus Recetas</h2>
<!-- {{ $recetas }}  // para visualizar lo que se pasa de la base de datos-->

<div class="col-md-10 mx-auto bg-white p-3">
<table class="table">
    <thead class="bg-primary text-ligth">
      <tr>
        <th scole="col">Titulo</th>
        <th scole="col">Categorias</th>
        <th scole="col">Acciones</th>
      </tr>
    </thead>

    <tbody>

      @foreach ($recetas as $receta)
      <tr>
        <td> {{$receta->titulo}} </td>
        <td> {{$receta->categoria->nombre}} </td> //NOTA: SE HA REALIZADO LA RELACION EN MODELO Receta.php (categoria) REVISAR CONTRA 75.
        <td>
            <a href="" class="btn btn-danger mr-1">Eliminar</a>
            <a href="" class="btn btn-dark mr-1">Editar</a>
       <!-- <a href="/recetas/{{$receta->id}}" class="btn btn-success mr-1">Ver</a> -->
       <!-- <a href="{{ action('RecetaController@show', ['receta' => $receta->id]) }}" class="btn btn-success mr-1">Ver</a> -->
            <a href="{{ route('recetas.show', ['receta' => $receta->id]) }}" class="btn btn-success mr-1 d-block">Ver</a>
        </td>
      </tr>
      @endforeach

    </tbody>
</table>
</div>
-----------------------------------------------------------------------------
***************************************************************************************************************************************
86. SOLUCIONAR PROBLEMAS DE TRIX-EDITOR (Vue.config.ignoredElements)

*En views->layouts->app.blade.php
<!-- Scripts -->
<script src="{{ asset('js/app.js') }}" defer></script>
El defer lo que hace es esperar a que todo el contenido de la pagina este cargado HTML y luego carga el JS

*En views->recetas->create.blade.php
Agregar defer:
@section('scripts')
  <script src="https://cdnjs.cloudflare.com/ajax/libs/trix/1.2.4/trix.js" integrity="sha512-zEL66hBfEMpJUz7lHU3mGoOg12801oJbAfye4mqHxAbI0TTyTePOOb2GFBCsyrKI05UftK2yR5qqfSh+tDRr4Q==" crossorigin="anonymous" defer></script>
@endsection

Despues de lo anterior marca errores en la consola por que piensa que <trix-editor></trix-editor> es un
componente de vue entonces

*En resources->js->app.js
Vue.config.ignoredElements = ['trix-editor', 'trix-toolbar'];

***************************************************************************************************************************************
SEC 10. EDICION DE RECETAS (CRUD "U")
87. EL METODO EDIT

*En web.php
 Route::get('/recetas/{receta}/edit', 'RecetaController@edit' )->name('recetas.edit');

*En RecetaController
public function edit(Receta $receta)
{
    //
    return "desde edit";
}

Probar con: 127.0.0.1:8000/recetas/3/edit

<a href="{{ route('recetas.edit', ['receta' => $receta->id]) }}" class="btn btn-dark d-block mb-2">Editar</a>
-----------------------------------------------------------------------------
*En views->recetas->index.blade.php
<h2 class="text-center mb-5">Administra tus Recetas</h2>
<!-- {{ $recetas }}  // para visualizar lo que se pasa de la base de datos-->

<div class="col-md-10 mx-auto bg-white p-3">
<table class="table">
    <thead class="bg-primary text-ligth">
      <tr>
        <th scole="col">Titulo</th>
        <th scole="col">Categorias</th>
        <th scole="col">Acciones</th>
      </tr>
    </thead>

    <tbody>

      @foreach ($recetas as $receta)
      <tr>
        <td> {{$receta->titulo}} </td>
        <td> {{$receta->categoria->nombre}} </td> //NOTA: SE HA REALIZADO LA RELACION EN MODELO Receta.php (categoria) REVISAR CONTRA 75.
        <td>
            <a href="" class="btn btn-danger mr-1">Eliminar</a>
            <a href="{{ route('recetas.edit', ['receta' => $receta->id]) }}" class="btn btn-dark d-block mb-2">Editar</a>
       <!-- <a href="/recetas/{{$receta->id}}" class="btn btn-success mr-1">Ver</a> -->
       <!-- <a href="{{ action('RecetaController@show', ['receta' => $receta->id]) }}" class="btn btn-success mr-1">Ver</a> -->
            <a href="{{ route('recetas.show', ['receta' => $receta->id]) }}" class="btn btn-success mr-1 d-block">Ver</a>
        </td>
      </tr>
      @endforeach

    </tbody>
</table>
</div>
-----------------------------------------------------------------------------
La edicion es similar a la cracion
Se crea el archivo en view->recetas->edit.blade.php

-----------------------------------------------------------------------------
*En RecetaController
public function edit(Receta $receta)
{
    // Obtener las categorias (Con modelo)
    $categorias = CategoriaReceta::all(['id', 'nombre']);

    return view('recetas.edit', compact('categorias'));
}
-----------------------------------------------------------------------------
***************************************************************************************************************************************
88. Primeros pasos con el formulario

-----------------------------------------------------------------------------
*En RecetaController
public function edit(Receta $receta)
{
    // Obtener las categorias (Con modelo)
    $categorias = CategoriaReceta::all(['id', 'nombre']);

    return view('recetas.edit', compact('categorias', 'receta'));
}
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
*En view->recetas->edit.blade.php
@extends('layouts.app')

@section('styles')
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/trix/1.2.4/trix.css" integrity="sha512-qjOt5KmyILqcOoRJXb9TguLjMgTLZEgROMxPlf1KuScz0ZMovl0Vp8dnn9bD5dy3CcHW5im+z5gZCKgYek9MPA==" crossorigin="anonymous" />
@endsection

@section('botones')
  <a href="{{ route('recetas.index') }}" class="btn btn-outline-primary mr-2 font-weight-bold">
    <svg class="icono" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 15l-3-3m0 0l3-3m-3 3h8M3 12a9 9 0 1118 0 9 9 0 01-18 0z" />
    </svg>
  Volver</a>
@endsection

@section('content')

{{-- {{$receta}} --}} {{-- Probar con: 127.0.0.1:8000/recetas/3/edit --}}

  <h2 class="text-center mb-5">Editar Receta: {{$receta->titulo}} </h2>
  <!-- {{ $categorias }} -->

  <div class="row justify-content-center mt-5">
    <div class="col-md-8">
      <form method="POST" action="{{ route('recetas.update', ['receta' => $receta->id]) }}" enctype="multipart/form-data" novalidate>
          @csrf

          @method('PUT')
          <div class="form-group">
              <label for="titulo">Titulo Receta</label>

              <input type="text"
                  name="titulo"
                  class="form-control @error('titulo') is-invalid @enderror "
                  id="titulo"
                  placeholder="Titulo Receta"
                  value="{{ $receta->titulo }}"
              >
              @error('titulo')
                <span class="invalid-feedback d-block" role="alert">
                  <strong>{{$message}}</strong>
                </span>
              @enderror
          </div>

          <div class="from-group">
              <label for="categoria">Categoría</label>
              <select
                  class="form-control @error('categoria') is-invalid @enderror"
                  name="categoria"
                  id="categoria"
              >
                  <option value="">--Seleccione --</option>
                  @foreach ($categorias as $categoria)
                    <option
                        value="{{ $categoria->id }}"
                        {{ $receta->categoria_id == $categoria->id ? 'selected' : '' }}
                        >{{$categoria->nombre}}</option>
                  @endforeach
              </select>
              @error('categoria')
                <span class="invalid-feedback d-block" role="alert">
                  <strong>{{$message}}</strong>
                </span>
              @enderror
          </div>

          <div class="form group mt-3">
            <label for="preparacion">Preparación</label>
            <input id="preparacion" type="hidden" name="preparacion" value="{{ $receta->preparacion }}">
            <trix-editor
              class="form-control @error('preparacion') is-invalid @enderror"
              input="preparacion"
            ></trix-editor>
            @error('preparacion')
              <span class="invalid-feedback d-block" role="alert">
                <strong>{{$message}}</strong>
              </span>
            @enderror
          </div>

          <div class="form group mt-3">
            <label for="ingredientes">Ingredientes</label>
            <input id="ingredientes" type="hidden" name="ingredientes" value="{{ $receta->ingredientes }}">
            <trix-editor
              class="form-control @error('ingredientes') is-invalid @enderror"
              input="ingredientes"
            ></trix-editor>
            @error('ingredientes')
              <span class="invalid-feedback d-block" role="alert">
                <strong>{{$message}}</strong>
              </span>
            @enderror
          </div>

          <div class="form group mt-3">
            <label for="imagen">Elige la Imagen</label>
            <input
                id="imagen"
                type="file"
                name="imagen"
                class="form-control @error('imagen') is-invalid @enderror"
            >
            <div class="mt-4">
                <p>Imagen Actual:</p>
                <img src="/storage/{{$receta->imagen}}" style="width: 300px">
            </div>
            @error('imagen')
              <span class="invalid-feedback d-block" role="alert">
                <strong>{{$message}}</strong>
              </span>
            @enderror
          </div>

          <div class="form-group">
            <input type="submit" class="btn btn-primary" value="Agregar Receta">
          </div>
      </form>
    </div>
  </div>

@endsection

@section('scripts')
  <script src="https://cdnjs.cloudflare.com/ajax/libs/trix/1.2.4/trix.js" integrity="sha512-zEL66hBfEMpJUz7lHU3mGoOg12801oJbAfye4mqHxAbI0TTyTePOOb2GFBCsyrKI05UftK2yR5qqfSh+tDRr4Q==" crossorigin="anonymous" defer></script>
@endsection
-----------------------------------------------------------------------------
***************************************************************************************************************************************
89. REGISTRANSO EL METODO PARA EDITAR Y AGREGANDO SEGURIDAD (UPDATE) (PUT/PATCH) @method('PUT')

SEGURIDAD EN LARAVEL

-----------------------------------------------------------------------------
*En web.php
Route::put('/recetas/{receta}', 'RecetaController@update' )->name('recetas.update');
-----------------------------------------------------------------------------
*En view->recetas->edit.blade.php
NOTA: receta es el mismo que se usa como comodin en:
web.php:
Route::put('/recetas/{receta}', 'RecetaController@update' )->name('recetas.update');
y RecetaController:
public function update(Request $request, Receta $receta)
Y EN FORM:
action="{{ route('recetas.update', ['receta' => $receta->id]) }}"

<form method="POST" action="{{ route('recetas.update', ['receta' => $receta->id]) }}" enctype="multipart/form-data" novalidate>
    @csrf
    @method('PUT')
-----------------------------------------------------------------------------
*En RecetaController
public function update(Request $request, Receta $receta)
{
  return "editando";
}
-----------------------------------------------------------------------------
***************************************************************************************************************************************
90. GUARDANDO RECETA EDITADA EN LA BD

-----------------------------------------------------------------------------
*En RecetaController
public function update(Request $request, Receta $receta)
{
    //return $receta; //EN ESTA VARIABLE EST A DISPOIBLE LA INFORMACION DE LA RECETA

    //validación
    //$data = request()->validate;
    $data = $request->validate([
      'titulo' => 'required|min:6',
      'preparacion' => 'required',
      'ingredientes' => 'required',
      'categoria' => 'required',
    ]);

    //Asignar los valores
    $receta->titulo = $data['titulo'];
    $receta->preparacion = $data['preparacion'];
    $receta->ingredientes = $data['ingredientes'];
    $receta->categoria_id = $data['categoria'];

    // Si el usuario sube una nueva imagen
    if(request('imagen')) {
      // obteber la ruta de la imagen
            $ruta_imagen = $request['imagen']->store('upload-recetas', 'public');

      // Resize de la imagen
            //$img = Image::make( public_path("storage/{$ruta_imagen}"))->fit(1000, 550);
            //$img->save();

      // Asignar al objeto
      $receta->imagen = $ruta_imagen;
    }

    $receta->save();

    //Redireccionar
    return redirect()->action('RecetaController@index');
}
-----------------------------------------------------------------------------
***************************************************************************************************************************************
91. ASEGURAR QUE SOLO QUIEN CREO ESA RECETA PUEDA EDITARLA (SEGURIDAD EN LARAVEL) (POLICY)

SEGURIDAD EN LARAVEL

php artisan list (make:policy)
php artisan make:policy RecetaPolicy -m Receta //usualmente se pone el nombre del modelo seguido de Policy

ver en app->Policies->RecetaPolicy.php

Existen algunos metodos ya precargados como si un usuario puede crear, actualizar o eliminar algun modelo.

-----------------------------------------------------------------------------
*En app->Policies->RecetaPolicy.php
public function update(User $user, Receta $receta)
{
    //
    // Revisa si el usuario autenticado es el mismo que creo la receta
    return $user->id === $receta->user_id;
}

Nota: ver en la migracion que tiene reference
-----------------------------------------------------------------------------
*En RecetaController
public function update(Request $request, Receta $receta)
{
    //return $receta;

    // Revisar el policy
    $this->authorize('update', $receta);

    //validación
    $data = $request->validate([
      'titulo' => 'required|min:6',
      'preparacion' => 'required',
      'ingredientes' => 'required',
      'categoria' => 'required',
    ]);

    //Asignar los valores
    $receta->titulo = $data['titulo'];
    $receta->preparacion = $data['preparacion'];
    $receta->ingredientes = $data['ingredientes'];
    $receta->categoria_id = $data['categoria'];

    // Si el usuario sube una nueva imagen
    if(request('imagen')) {
      // obteber la ruta de la imagen
            $ruta_imagen = $request['imagen']->store('upload-recetas', 'public');

      // Resize de la imagen
            //$img = Image::make( public_path("storage/{$ruta_imagen}"))->fit(1000, 550);
            //$img->save();

      // Asignar al objeto
      $receta->imagen = $ruta_imagen;
    }

    $receta->save();

    //Redireccionar
    return redirect()->action('RecetaController@index');
}
-----------------------------------------------------------------------------

***************************************************************************************************************************************
SEC 11. ELIMINAR RECETAS (CRUD "D")
92. ELIMINANDO RECETAS DE LA BASE DE DATOS (DELETE)(DESTROY) @method('DELETE')

FORMA SENCILLA

-----------------------------------------------------------------------------
*En web.php
Route::delete('/recetas/{receta}', 'RecetaController@destroy' )->name('recetas.destroy');

-----------------------------------------------------------------------------
*En RecetaController
public function destroy(Receta $receta)
{
  return "desde destroy";
}

Para probar poner 127.0.0.1:8000/recetas/1
-----------------------------------------------------------------------------
*En views->recetas->index.blade.php
<h2 class="text-center mb-5">Administra tus Recetas</h2>
<!-- {{ $recetas }}  // para visualizar lo que se pasa de la base de datos-->

<div class="col-md-10 mx-auto bg-white p-3">
<table class="table">
    <thead class="bg-primary text-ligth">
      <tr>
        <th scole="col">Titulo</th>
        <th scole="col">Categorias</th>
        <th scole="col">Acciones</th>
      </tr>
    </thead>

    <tbody>

      @foreach ($recetas as $receta)
      <tr>
        <td> {{$receta->titulo}} </td>
        <td> {{$receta->categoria->nombre}} </td> //NOTA: SE HA REALIZADO LA RELACION EN MODELO Receta.php (categoria) REVISAR CONTRA 75.
        <td>

            <!-- para elimimar se usa este codigo -->
            <form class="" action="{{ route('recetas.destroy', ['receta' => $receta->id ]) }}" method="POST">
                @csrf
                @method('DELETE')
                <input type="submit" class="btn btn-danger d-block w-100 mb-2" value="Eliminar &times;">
            </form>


            <a href="{{ route('recetas.edit', ['receta' => $receta->id]) }}" class="btn btn-dark d-block mb-2">Editar</a>
       <!-- <a href="/recetas/{{$receta->id}}" class="btn btn-success mr-1">Ver</a> -->
       <!-- <a href="{{ action('RecetaController@show', ['receta' => $receta->id]) }}" class="btn btn-success mr-1">Ver</a> -->
            <a href="{{ route('recetas.show', ['receta' => $receta->id]) }}" class="btn btn-success mr-1 d-block">Ver</a>
        </td>
      </tr>
      @endforeach

    </tbody>
</table>
</div>
-----------------------------------------------------------------------------
Para probar poner 127.0.0.1:8000/recetas/1
-----------------------------------------------------------------------------
*En app->Policies->RecetaPolicy.php
public function delete(User $user, Receta $receta)
{
    //
    // Revisa si el usuario autenticado es el mismo que creo la receta
    return $user->id === $receta->user_id;
}
-----------------------------------------------------------------------------
*En RecetaController
public function destroy(Receta $receta)
{
    // Ejecutar el Policy
    $this->authorize('delete', $receta);

    // Eliminar la receta
    $receta->delete();

    return redirect()->action('RecetaController@index');
}
-----------------------------------------------------------------------------
***************************************************************************************************************************************
93. CREANDO UN COMPONENTE DE VUE PARA ELIMINAR RECETA ( AXIOS, VUE Y sweetalert2)

FORMA CON AXIOS Y VUE
(SI QUIERES AÑADIR MAS INTERACCION SE TENDRA QUE HACER VIA AJAX, O VIA FETCH) props: ['recetaId'],

-----------------------------------------------------------------------------
*En views->recetas->index.blade.php

@extends('layouts.app')

@section('botones')

{{-- SE PASA TODO ESTE CODIGO A ui.navegacion.blade.php y se coloca @include--}}
  @include('ui.navegacion')

{{-- {{ Auth::user() }} --}} {{-- SEGUNDA FORMA --}}
{{--
  <a href="{{ route('recetas.create') }}" class="btn btn-outline-primary mr-2 font-weight-bold">
    <svg class="icono" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 13h6m-3-3v6m5 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
    </svg>
  Crear Receta</a>
--}}
  {{-- PRIMERA FORMA --}}
  {{-- <a href="{{ route('perfiles.edit', ['perfil' => $usuario->id ]) }}" class="btn btn-outline-success mr-2 font-weight-bold">Editar Perfil</a> --}}
  {{-- SEGUNDA FORMA con helpers si tener que modificar en receta controller como en la primera forma --}}
{{--
  <a href="{{ route('perfiles.edit', ['perfil' => Auth::user()->id ]) }}" class="btn btn-outline-success mr-2 font-weight-bold">
    <svg class="icono" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
    </svg>
  Editar Perfil</a>
  <a href="{{ route('perfiles.show', ['perfil' => Auth::user()->id ]) }}" class="btn btn-outline-info mr-2 font-weight-bold">
    <svg class="icono" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5.121 17.804A13.937 13.937 0 0112 16c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0zm6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
    </svg>
  Ver Perfil</a>
--}}
@endsection

@section('content')

<h2 class="text-center mb-5">Administra tus Recetas</h2>

<!-- {{ $recetas }}  // para visualizar lo que se pasa de la base de datos-->

<div class="col-md-10 mx-auto bg-white p-3">
  <table class="table">
      <thead class="bg-primary text-ligth">
        <tr>
          <th scole="col">Titulo</th>
          <th scole="col">Categorias</th>
          <th scole="col">Acciones</th>
        </tr>
      </thead>

      <tbody>

        @foreach ($recetas as $receta)
        <tr>
          <td> {{$receta->titulo}} </td>
          <td> {{$receta->categoria->nombre}} </td>
          <td>

              <!-- para elimimar se usa este codigo -->
              <!--
              <form class="" action="{{ route('recetas.destroy', ['receta' => $receta->id ]) }}" method="POST">
                  @csrf
                  @method('DELETE')
                  <input type="submit" class="btn btn-danger d-block w-100 mb-2" value="Eliminar &times;">
              </form>
              -->

              <eliminar-receta
                  receta-id={{$receta->id}}
              ></eliminar-receta>

              <!-- <a href="" class="btn btn-danger mr-1">Eliminar</a> -->
              <a href="{{ route('recetas.edit', ['receta' => $receta->id]) }}" class="btn btn-dark d-block mb-2">Editar</a>
              <!-- <a href="{{ action('RecetaController@show', ['receta' => $receta->id]) }}" class="btn btn-success mr-1">Ver</a> -->
              <a href="{{ route('recetas.show', ['receta' => $receta->id]) }}" class="btn btn-success mr-1 d-block">Ver</a>
          </td>
        </tr>
        @endforeach

      </tbody>
  </table>

  <div class="col-12 mt4 justify-content-center d-flex">
    {{ $recetas->links() }}
  </div>

</div>

@endsection

-----------------------------------------------------------------------------
*En components se crea el archivo EliminarReceta

NOTA: DE index.blade.php
<eliminar-receta
    receta-id={{$receta->id}}
></eliminar-receta>

En el componente se recibe como: props: ['recetaId'],

<template>
  <input
      type="submit"
      class="btn btn-danger d-block w-100 mb-2"
      value="Eliminar ×"
      v-on:click="eliminarReceta"
  >
</template>

<script>
    export default {
        props: ['recetaId'],

        mounted() {
          console.log('receta actual', this.recetaId);
        },

     }
</script>
-----------------------------------------------------------------------------
* En resources->js->app.js registrar el componente EliminarReceta

Vue.component('eliminar-receta', require('./components/EliminarReceta.vue').default);
-----------------------------------------------------------------------------

***************************************************************************************************************************************
94. CREAR UN METODO PARA ELIMINAR UNA RECETA (v-on:click="eliminarReceta") (@click="eliminarReceta")

-----------------------------------------------------------------------------
*En components se crea el archivo EliminarReceta

NOTA: DE index.blade.php
<eliminar-receta
    receta-id={{$receta->id}}
></eliminar-receta>

En el componente se recibe como: props: ['recetaId'],

<template>
  <input
      type="submit"
      class="btn btn-danger d-block w-100 mb-2"
      value="Eliminar ×"
      v-on:click="eliminarReceta"
      //@click="eliminarReceta"
  >
</template>

<script>
    export default {
        props: ['recetaId'],
        /*
        mounted() {
          console.log('receta actual', this.recetaId);
        },
        */
        methods: {
          eliminarReceta() {
            console.log('diste click', this.recetaId);
          }
        }

     }
</script>
-----------------------------------------------------------------------------
***************************************************************************************************************************************
95. AFREGANDO sweetalert2 /VueSweetalert2/

npm  install -S vue-sweetalert2

-----------------------------------------------------------------------------
* En resources->js->app.js registrar el componente EliminarReceta

import VueSweetalert2 from 'vue-sweetalert2';
Vue.use(VueSweetalert2);

//console.log(Vue.prototype); //Se puede observar swall en el prototype
-----------------------------------------------------------------------------
*En components se crea el archivo EliminarReceta
<template>
  <input
      type="submit"
      class="btn btn-danger d-block w-100 mb-2"
      value="Eliminar ×"
      v-on:click="eliminarReceta"
  >
</template>

<script>
    export default {
        props: ['recetaId'],
        /*
        mounted() {
          console.log('receta actual', this.recetaId);
        },
        */
        methods: {
          eliminarReceta() {
            //console.log('diste click', this.recetaId);
            this.$swal({
              title: '¿Deseas eliminar esta receta?',
              text: "Una vez eliminada no se puede recuperar!",
              icon: 'warning',
              showCancelButton: true,
              confirmButtonColor: '#3085d6',
              cancelButtonColor: '#d33',
              confirmButtonText: 'Si',
              cancelButtonText: 'No'
            }).then((result) => {
              if (result.value) {

                // Enviar la peticion al servidor Cap 96.

                this.$swal({
                  title: 'Receta eliminada',
                  text: "Se eliminó la receta!",
                  icon: 'success'
                })
              }
            })
          }
        }
    }

</script>
-----------------------------------------------------------------------------

***************************************************************************************************************************************
96. Eliminar Receta con Vue y VueSweetalert2 // Enviar la peticion al servidor con axios.post
axios funciona con promises

const params = {
  id: this.recetaId
}

// Enviar la peticion al servidor
axios.post(`/recetas/${this.recetaId}`, {params, _method: 'delete'})

-----------------------------------------------------------------------------
*En components se crea el archivo EliminarReceta

-----------------------------------------------------------------------------
<template>
  <input
      type="submit"
      class="btn btn-danger d-block w-100 mb-2"
      value="Eliminar ×"
      v-on:click="eliminarReceta"
  >
</template>

<script>
    export default {
        props: ['recetaId'],
        /*
        mounted() {
          console.log('receta actual', this.recetaId);
        },
        */
        methods: {
          eliminarReceta() {
            //console.log('diste click', this.recetaId);
            this.$swal({
              title: '¿Deseas eliminar esta receta?',
              text: "Una vez eliminada no se puede recuperar!",
              icon: 'warning',
              showCancelButton: true,
              confirmButtonColor: '#3085d6',
              cancelButtonColor: '#d33',
              confirmButtonText: 'Si',
              cancelButtonText: 'No'
            }).then((result) => {
              if (result.isConfirmed) {

                const params = {
                  id: this.recetaId
                }

                // Enviar la peticion al servidor
                axios.post(`/recetas/${this.recetaId}`, {params, _method: 'delete'})
                    .then(respuesta => {
                        //console.log(respuesta);
                        this.$swal({
                          title: 'Receta eliminada',
                          text: "Se eliminó la receta!",
                          icon: 'success'
                        });
                        //Eliminar receta del DOM
                          //console.log(this.$el); //ES EL ELEMNTO QUE LANZA TODO EN ESTE CASO EL INPUT
                          this.$el.parentNode.parentNode.parentNode.removeChild(this.$el.parentNode.parentNode)
                    })
                    .catch(error => {
                      console.log(error);
                    })

              }
            })
          }
        }
    }

</script>

-----------------------------------------------------------------------------
*En RecetaController
para probar se pone:
public function destroy(Receta $receta)
{
    return "eliminando...";
}
-----------------------------------------------------------------------------
*En RecetaController FINAL
public function destroy(Receta $receta)
{
    //

    //return "desde destroy";
    //return "eliminando...";

    // Ejecutar el Policy
    $this->authorize('delete', $receta);

    // Eliminar la receta
    $receta->delete();

    return redirect()->action('RecetaController@index');

}
-----------------------------------------------------------------------------
***************************************************************************************************************************************
SEC. 12
***************************************************************************************************************************************
SEC. 15 ALMACENANDO ME GUSTA

112. UTILIZANDO UNA ANIMACION PARA LOS QUE ME GUSTA

*En recetas->show.blade: (agregar como un componente de VUEJS para que sea interactivo)
<like-button></like-button>

*Se crea en js->componentes->likeButton.vue

*En app.js se registra el componente:
Vue.component('like-button', require('./components/LikeButton.vue').default);

*En el componente js->componentes->likeButton.vue
<template>
  <div>
    <span class="like-btn"></span>
  </div>
</template>

*Se crea archivo _like.scss
-------------------------------------------------------------------------------
.like-btn {
  display: inline-block;
  Cursor: pointer;
  width: 80px;
  height: 80px;
}

.like-btn {
  background: url('https://i.ibb.co/vw78mf3/heart.png') no-repeat 0% 50%;
  background-size: 2900%;
}
.like-active {
  animation-name: animate;
  animation-duration: .8s;
  animation-iteration-count: 1;
  animation-fill-mode: forwards;
}
.like-active {
  animation-timing-function: steps(28);
}

@keyframes animate {
  0%   { background-position: left;  }
  50%  { background-position: right; }
  100% { background-position: right; }
}
-------------------------------------------------------------------------------

* En app.js (lo que hace la animacion es el codigo de jquery) se pone lo siguiente (LARAVEL YA TIENE AGREGADO JQUERY):
/*
$('.like-btn').on('click', function() {
   $(this).toggleClass('like-active');
});
*/

***************************************************************************************************************************************
113. CREAR TABLA PIVOTE

Referencias de muchos a muchos...

php artisan make:migration create_likes_receta_pivot_table --create likes_receta

*En la migracion de likes_recetas:
public function up()
{
    Schema::create('likes_receta', function (Blueprint $table) {
        $table->id();
        //$table->foreignId('user_id')->references('id')->on('users');
        $table->foreignId('user_id')->constrained(); //$table->foreignId('user_id')->references('id')->on('users');
        $table->foreignId('receta_id')->constrained();
        $table->timestamps();
    });
}

FORMA PARA MIGRAR SIN BORRAR MIGRACIONES YA HECHAS EN LA BD
php artisan migrate --path=/database/migrations

***************************************************************************************************************************************
114. CREANDO RELACION DE LIKES (belongsToMany)

Modelo de receta y de usuario:

*En modelo Receta.php
// Likes que ha recibido una receta
public function likes()
{
  return $this->belongsToMany(User::class, 'likes_receta');
}

*En modelo User.php
// Recetas que el usuario le ha dado me gusta
public function meGusta()
{
  return $this->belongsToMany(Receta::class, 'likes_receta');
}

*En tinker:
php artisan tinker
>>> $usuario = User::find(1);
>>> $usuario->meGusta
Nota: si en este punto sale un error hay que especificar mas en las funciones
de los modelos ('likes_receta' )

php artisan tinker
>>> $usuario = User::find(1);
>>> $usuario->meGusta

php artisan tinker
>>> $receta = Receta::find(1);
>>> $receta->likes

***************************************************************************************************************************************
115. Almacenar o Quitar los likes con un Toggle (helper Toogle)

php artisan make:controller LikesController -m Receta

*En web.php
// Almacena los likes de las recetas
Route::post('/recetas/{receta}', 'LikesController@update' )->name('likes.update');

*En LikesController
public function update(Request $request, Receta $receta)
{
    //
    //Almacena los likes de un usuario a una receta
    return auth()->user()->meGusta()->toggle($receta);
}

***************************************************************************************************************************************
116. Almacenar o Quitar los Likes de la BD

Actualmente se tiene el codigo de Jquery * En app.js (lo que hace la animacion es el codigo de jquery) se pone lo siguiente (LARAVEL YA TIENE AGREGADO JQUERY):
/*
$('.like-btn').on('click', function() {
   $(this).toggleClass('like-active');
});
*/

Entonces se pasara a VUEJS
*En LikeButton.vue:
------------------------------------------------------------------------------
<template>
  <div>
    <span class="like-btn" @click="likeReceta"></span>
  </div>
</template>

<script>
  export default {
    props: ['recetaId'],
    methods: {
      likeReceta() {
        //console.log('Diste me gusta', this.recetaId);
        axios.post('/recetas/' + this.recetaId)
          .then(respuesta => {
            console.log(respuesta)
          })
          .catch(error => {
            console.log(error)
          });
      }
    }
  }
</script>
------------------------------------------------------------------------------

*En recetas->show.blade:
------------------------------------------------------------------------------
<like-button
    receta-id="{{$receta->id}}"
></like-button>
------------------------------------------------------------------------------

***************************************************************************************************************************************
117. Mostrando el estado del Like al cargar la Receta (MEMORIA POR BUSQUEDA SOLUCION CON METODO contains DE LARAVEL)

*En RecetaController: (contains)
-------------------------------------------------------------------------------
public function show(Receta $receta)
{
    //
    //return "desde el método show";

    // Obtener si el usuario actual le gusta la receta y esta autenticado
    $like = ( auth()->user() ) ? auth()->user()->meGusta->contains($receta->id) : false;

    //Algunos métodos para obtener una recetas nota: se pone el public function show($receta) cap 79
        //$receta = Receta::find($receta);
        //$receta = Receta::findOrFail($receta);

    //return $receta;

    return view('recetas.show', compact('receta', 'like'));
}
-------------------------------------------------------------------------------

*En recetas->show.blade:
------------------------------------------------------------------------------
<like-button
    receta-id="{{$receta->id}}"
    like="{{$like}}"
></like-button>
------------------------------------------------------------------------------

*En LikeButton.vue:
------------------------------------------------------------------------------
<template>
  <div>
    <span class="like-btn" @click="likeReceta" :class="{ 'like-active' : this.like }"></span>
  </div>
</template>

<script>
  export default {
    props: ['recetaId', 'like'],
    mounted() {
      console.log(this.like);
    },
    methods: {
      likeReceta() {
        //console.log('Diste me gusta', this.recetaId);
        axios.post('/recetas/' + this.recetaId)
          .then(respuesta => {
            console.log(respuesta)
          })
          .catch(error => {
            console.log(error)
          });
      }
    }
  }
</script>
------------------------------------------------------------------------------


***************************************************************************************************************************************
118. MOSTRANDO LA CANTIDAD DE LIKES

*En tinker
php artisan tinker
>>> $receta = Receta::find(1);
>>> $recetas->likes

*En RecetaController: (count())
-------------------------------------------------------------------------------
public function show(Receta $receta)
{
    //
    //return "desde el método show";

    // Obtener si el usuario actual le gusta la receta y esta autenticado
    $like = ( auth()->user() ) ? auth()->user()->meGusta->contains($receta->id) : false;

    // Pasa la cantidad de likes a la vista
    $likes = $receta->likes->count();

    //Algunos métodos para obtener una recetas nota: se pone el public function show($receta) cap 79
        //$receta = Receta::find($receta);
        //$receta = Receta::findOrFail($receta);

    //return $receta;

    return view('recetas.show', compact('receta', 'like', 'likes'));
}
-------------------------------------------------------------------------------

*En recetas->show.blade:
------------------------------------------------------------------------------
<div class="justify-content-center row text-center">
    {{-- {{$likes}} --}}
    {{-- {{$like}} --}}
    <like-button
        receta-id="{{$receta->id}}"
        like="{{$like}}"
        likes="{{$likes}}"
    ></like-button>
</div>
------------------------------------------------------------------------------

*En LikeButton.vue:
------------------------------------------------------------------------------
<template>
  <div>
    <span class="like-btn" @click="likeReceta" :class="{ 'like-active' : this.like }"></span>
    <p>{{ cantidadLikes }} Les gustó esta receta</p>
  </div>
</template>

<script>
  export default {
    props: ['recetaId', 'like', 'likes'],
    data: function() {
      return {
        totalLikes: this.likes
      }
    },
    //mounted() {
      //console.log(this.like);
    //},
    methods: {
      likeReceta() {
        //console.log('Diste me gusta', this.recetaId);
        axios.post('/recetas/' + this.recetaId)
          .then(respuesta => {
            console.log(respuesta)
            if(respuesta.data.attached.length > 0 ) {
              this.$data.totalLikes++;
            } else {
              this.$data.totalLikes--;
            }
          })
          .catch(error => {
            console.log(error)
          });
      }
    },
    computed: {
      cantidadLikes: function() {
        return this.totalLikes
      }
    }
  }
</script>
------------------------------------------------------------------------------
Nota: Los computed son mas estaticos y se recomienda data (en el ejercicio al
quitar el like el parrafo <p>{{ cantidadLikes }} Les gustó esta receta</p> se
sigue mostrando )

***************************************************************************************************************************************
119. PREVENIR QUE LAS PERSONAS NO PUEDAN DAR LIKE SI NO ESTAN EN SESION (.catch(error => { )



*En recetas->show.blade:
------------------------------------------------------------------------------
<div class="justify-content-center row text-center">
    {{-- {{$likes}} --}}
    {{-- {{$like}} --}}
    <like-button
        receta-id="{{$receta->id}}"
        like="{{$like}}"
        likes="{{$likes}}"
    ></like-button>
</div>
------------------------------------------------------------------------------

*En LikesController:
-------------------------------------------------------------------------------
public function __construct()
{
  $this->middleware('auth');
}
-------------------------------------------------------------------------------

*En LikeButton.vue:
------------------------------------------------------------------------------
<template>
  <div>
    <!-- <span class="like-btn" @click="likeReceta" :class="{ 'like-active' : this.like }"></span> -->
    <span class="like-btn" @click="likeReceta" :class="{ 'like-active' : isActive }"></span>
    <p>{{ cantidadLikes }} Les gustó esta receta</p>
  </div>
</template>

<script>
  export default {
    props: ['recetaId', 'like', 'likes'],
    data: function() {
      return {
        isActive: this.like,
        totalLikes: this.likes
      }
    },
    //mounted() {
      //console.log(this.like);
    //},
    methods: {
      likeReceta() {
        //console.log('Diste me gusta', this.recetaId);
        axios.post('/recetas/' + this.recetaId)
          .then(respuesta => {
            //console.log(respuesta)
            if(respuesta.data.attached.length > 0 ) {
              this.$data.totalLikes++;
            } else {
              this.$data.totalLikes--;
            }

            this.isActive = !this.isActive

          })
          .catch(error => {
            //console.log(error)
            if(error.response.status === 401) {
              window.location = '/register';
            }
          });
      }
    },
    computed: {
      cantidadLikes: function() {
        return this.totalLikes    //CHECAR CUANDO SE ADICIONA HASTA 120 ASI ESTA BIEN
      }
    }
  }
</script>
------------------------------------------------------------------------------

***************************************************************************************************************************************
120. MOSTRAR RECETAS QUE EL USUARIO HA DADO CLICK EN EL PANEL

*En RecetaController:
-------------------------------------------------------------------------------
public function index()
{

    //Auth::user()->recetas->dd();
    //auth()->user()->recetas->dd();
    //PRIMERA FORMA
    //$usuario = auth()->user();// se agrega en cap 106
    //$recetas = auth()->user()->recetas; //se desabilito al poner recetas con paginacion cap 110

    //
    //auth()->user()->meGusta->dd();
    //$meGusta = auth()->user()->meGusta; cap 120 uno forma de hacer

    // RECETAS CON PAGINACION
    //$usuario = auth()->user()->id; //se cambia en cap 120
    $usuario = auth()->user();

    $recetas = Receta::where('user_id', $usuario->id)->paginate(3);

    //PRIMERA FORMA
    // return view('recetas.index')->with('recetas', $recetas)->with('usuario', $usuario);   //PRIMERA FORMA
    //SEGUNDA FORMA (Como la original)
    return view('recetas.index')->with('recetas', $recetas)->with('usuario', $usuario);
}
-------------------------------------------------------------------------------

*En recetas->index.blade.php: {{$usuario->meGusta}}
-------------------------------------------------------------------------------

{{--  {{$usuario->meGusta}} --}}

<h2 class="text-center my-5">Recetas que te gustan</h2>
<div class="col-md-10 mx-auto bg-white p-3">

  @if ( count( $usuario->meGusta ) > 0 )
      <ul class="list-group">
        @foreach( $usuario->meGusta as $receta )
          <li class="list-group-item d-flex justify-content-between align-items-center">
            <p> {{$receta->titulo}}</p>
            <a class="btn btn-outline-success text-uppercase font-weight-bold" href="{{ route('recetas.show', ['receta' => $receta->id]) }}">Ver</a>
          </li>
        @endforeach
      </ul>
  @else
      <p class="text-center">Aún no tienes recetas Guardadas <small> Las recetas que te gustan apareceran aquí</small></p>
  @endif

</div>
-------------------------------------------------------------------------------

***************************************************************************************************************************************
SEC. 16
121. Creando el Controlador para la Vista de Inicio

php artisan make:controller InicioController

Vemos que ya existe HomeController en app->Http

-----------------------------------------------------------------------------
*En web.php
Sustituimos:
Route::get('/', function () {
    return view('welcome');
});
Por:
Route::get('/', 'InicioController@index')->name('inicio.index');
-----------------------------------------------------------------------------
*En InicioController:
public function index()
{
  return view('inicio.index');
}
-----------------------------------------------------------------------------
Se crea en views una carpeta inicio con archivo index.blade.php
*En  views->inicio->index.blade.php

@extends('layouts.app')

@section('styles')

@endsection

@section('content')
    <h2 class="titulo-categoria text-uppercase mb-4">Últimas Recetas</h2>
@endsection
-----------------------------------------------------------------------------
***************************************************************************************************************************************
122. Obteniendo Ultimas recetas (QUERY BUILDER LARAVEL)

Query Bulider: selects etc,...

-----------------------------------------------------------------------------
*En InicioController:

Importar:
use App\Receta;

public function index()
{

  // Obtener las recetas mas nuevas
  //$nuevas = Receta::orderBy('created_at', 'DESC')->get(); // otra forma de traer los ultimos
  //$nuevas = Receta::latest()->limit(5)->get();
  $nuevas = Receta::latest()->take(5)->get(); // para obtener los primeros:
  //$nuevas = Receta::oldest()->get();

  //return $nuevas;
  return view('inicio.index', compact('nuevas'));
}
-----------------------------------------------------------------------------
***************************************************************************************************************************************
123. MOSTRANDO LA INFORMACION DE LAS RECETAS (HELPERS LARAVEL)

-----------------------------------------------------------------------------
*En  views->inicio->index.blade.php
@extends('layouts.app')

@section('styles')

@endsection

@section('content')
    <h2 class="titulo-categoria text-uppercase mb-4">Últimas Recetas</h2>

    <div class="row">
      @foreach ($nuevas as $nueva)
        <div class="col-md-4">
          <div class="card">
            <img src="/storage/{{ $nueva->imagen }}" class="card-img-top" alt="imagen receta">

            <div class="card-body">

                <!-- <h3>{{ $nueva->titulo }}</h3> -->
                <!-- <h3>{{ Str::upper( $nueva->titulo ) }}</h3> -->
                <!-- <h3>{{ Str::ucfirst( $nueva->titulo ) }}</h3>  -->
                <h3>{{ Str::title( $nueva->titulo ) }}</h3>

                <!-- <p> {{ Str::limit( strip_tags( $nueva->preparacion ), 50 ) }}</p> -->
                <p> {{ Str::words( strip_tags( $nueva->preparacion ), 20 ) }}</p>

                <a href=" {{ route('recetas.show', ['receta' => $nueva->id ]) }}"
                   class="btn btn-primary d-block font-weigth-bold text-uppercase"
                >Ver Receta</a>

            </div>
          </div>
        </div>
      @endforeach
    </div>

@endsection
-----------------------------------------------------------------------------
***************************************************************************************************************************************
124. AÑADIENDO OWL CAROUSEL, JQUERY (OTRA OPCION: bxSlider)

npm i owl.carousel

Integrar hoja de estilo por cdnjs version minificada.

-----------------------------------------------------------------------------
*En  views->inicio->index.blade.php
@extends('layouts.app')

@section('styles')
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/assets/owl.carousel.min.css">
@endsection
-----------------------------------------------------------------------------
AGREGAR OwlCarousel2 AL PROYECTO Y SE HACE EN 2 LUGARES:

*En webpack.mix.js
mix.js('resources/js/app.js', 'public/js')
    .autoload({
      jquery: ['$', 'window.jQuery', 'jQuery']
    })
    .sass('resources/sass/app.scss', 'public/css');

*En app.js
1. quitar jQuery
/*
$('.like-btn').on('click', function() {
   $(this).toggleClass('like-active');
});
*/
2. Importar owlCarousel
import 'owl.carousel';
import VueSweetalert2 from 'vue-sweetalert2';
3. Agregar la configuracion de owlcarousel:
/** Carousel con OWL **/
jQuery(document).ready(function() {
  //alert('funciona');
  jQuery('.owl-carousel').owlCarousel({
      margin: 10,
      loop:true,
      autoplay: true,
      autoplayHoverPause: true,
      responsive: {
        0 : {
          items: 1
        },
        600: {
          items: 2
        },
        1000: {
          items: 3
        }
      }
  });
});
-----------------------------------------------------------------------------
*En  views->inicio->index.blade.php
@extends('layouts.app')
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/assets/owl.carousel.min.css">
@section('styles')

@endsection

@section('content')
    <h2 class="titulo-categoria text-uppercase mb-4">Últimas Recetas</h2>

    <div class="owl-carousel owl-theme">
      @foreach ($nuevas as $nueva)
        <!-- <div class="col-md-4"> -->
          <div class="card">
            <img src="/storage/{{ $nueva->imagen }}" class="card-img-top" alt="imagen receta">

            <div class="card-body">

                <!-- <h3>{{ $nueva->titulo }}</h3> -->
                <!-- <h3>{{ Str::upper( $nueva->titulo ) }}</h3> -->
                <!-- <h3>{{ Str::ucfirst( $nueva->titulo ) }}</h3>  -->
                <h3>{{ Str::title( $nueva->titulo ) }}</h3>

                <!-- <p> {{ Str::limit( strip_tags( $nueva->preparacion ), 50 ) }}</p> -->
                <p> {{ Str::words( strip_tags( $nueva->preparacion ), 20 ) }}</p>

                <a href=" {{ route('recetas.show', ['receta' => $nueva->id ]) }}"
                   class="btn btn-primary d-block font-weigth-bold text-uppercase"
                >Ver Receta</a>

            </div>
          </div>
        <!--</div>-->
      @endforeach
    </div>

@endsection
-----------------------------------------------------------------------------
***************************************************************************************************************************************
125. OBTENER RECETAS POR CATEGORÍA

***************************************************************************************************************************************

***************************************************************************************************************************************

***************************************************************************************************************************************

***************************************************************************************************************************************

***************************************************************************************************************************************

***************************************************************************************************************************************

***************************************************************************************************************************************

https://es.stackoverflow.com/questions/26091/acceder-remotamente-a-proyecto-laravel
php artisan serve --host="tu ip"

***************************************************************************************************************************************

***************************************************************************************************************************************

				SEGUNDO PROYECTO DE CURSO LARAVEL

***************************************************************************************************************************************

:~/Desktop/Curso Laravel$ laravel new devjobs

In NewCommand.php line 45:

  The Laravel installer requires PHP 7.3.0 or greater. Please use "composer c
  reate-project laravel/laravel" instead.

new [--dev] [--auth] [-f|--force] [--] [<name>]

:~/Desktop/Curso Laravel$ composer create-project laravel/laravel devjobs
:~/Desktop/Curso Laravel$ cd devjobs
:~/Desktop/Curso Laravel/devjobs$ composer install
:~/Desktop/Curso Laravel/devjobs$ php artisan serve
:~/Desktop/Curso Laravel/devjobs$ composer require laravel/ui
:~/Desktop/Curso Laravel/devjobs$ php artisan list
:~/Desktop/Curso Laravel/devjobs$ php artisan ui:auth
:~/Desktop/Curso Laravel/devjobs$ php artisan ui vue
:~/Desktop/Curso Laravel/devjobs$ npm i
:~/Desktop/Curso Laravel/devjobs$ npm run watch
:~/Desktop/Curso Laravel/devjobs$ npm install --save-dev tailwindcss laravel-mix-tailwind (cap 137)
:~/Desktop/Curso Laravel/devjobs$ npx tailwindcss init

   tailwindcss 1.8.12
   ✅ Created Tailwind config file: tailwind.config.js

***************************************************************************************************************************************

En el archivo webpack.mix.js se debe importar:

required('laravel-mix-tailwind');
& se coloca  .tailwind()

resources>sass>app.scss
se eliminan variables archivo y linea y tambien boostrap

agregra utilidades de tailwind
@tailwind base;
@tailwind components;
@tailwind utilities;

correr npm run watch si marca errr hay que renombrar el archivo tailwind.config.js como tailwind.js

***************************************************************************************************************************************
Cap 138
Instalar español
:~/Desktop/Curso Laravel/devjobs$ composer require laraveles/spanish
:~/Desktop/Curso Laravel/devjobs$ php artisan list
:~/Desktop/Curso Laravel/devjobs$ php artisan laraveles:install-lang

en config>app.php
cambiar 'locale' => 'en',
a
'locale' => 'es',

***************************************************************************************************************************************
Cap 139

***************************************************************************************************************************************
Cap 142
Validacion de formularion
en login.blade.php encontrado en resources>views>auth> agregar novalidate:

<form class="py-10 px-5" method="POST" action="{{ route('login') }}" novalidate>

y eliminar required

<input id="email" type="email" class="p-3 bg-gray-200 rounded form-input w-full @error('email') is-invalid @enderror" name="email" value="{{ old('email') }}" required autocomplete="email" autofocus>

***************************************************************************************************************************************

Cap 143

Mail trap
en archivo .env dar de alta mailtrap:
MAIL_USERNAME=
MAIL_PASSWORD=
AIL_FROM_ADDRESS=

En archivo modelo user.php:
class User extends Authenticatable implements MustVerifyEmail

En archivo web.php:
Auth::routes(['verify' => true]);

En archivo HomeCoontroller (protegerlo -> verificarlo):
public function __construct()
    {
        $this->middleware(['auth', 'verified']);
    }
***************************************************************************************************************************************
Cap 144 pagina de  verificación

En archivo verify.blade.php:

***************************************************************************************************************************************
Cap 145 Olvidaste tu password ?

En archivo resources > views > auth > passwords > email.blade.php
bootstrp: is-invalid vs tailwind: border-red-500 border para pintar el borde en rojo durante la validacion

***************************************************************************************************************************************
Cap 147
php artisan make:model Vacante -mcr

* Se da de alta en web.php:
	Route::get('/Vacantes', 'VacanteController@index')->('vacantes.index');

* En el controller VacanteController.php se usa index:
	public function index()
    {
        //
        return "desde VacanteController@index";
    }

* en app > Providers > RouteServiceProvider.php se cambia redireccionamiento hacia vacatntes en lugar de /home
	  public const HOME = '/vacantes';

* Proteger en VacanteController.php:
	public function __construct()
    {
        //Revisar que el usuario este autenticado y verificado
        $this->middleware(['auth', 'verified']);
    }


***************************************************************************************************************************************
Cap 148
* Se crea vista en resources > views > vacantes > index.blade.php

* En el controller VacanteController.php se deja enlazado como:
	public function index()
    {
        //
        //return "desde VacanteController@index";
        return view('vacantes.index');
    }

* En el archivo resources > views > layouts > app.blade.php se coloca un @yield
	<div class="bg-gray-700">
          <nav class="container mx-auto flex space-x-1">
            @yield('navegacion')
          </nav>
        </div>

* En el archivo de vista de vacantes resources > views > vacantes > index.blade.php  se crea un include ui por lo que
  se crea en a ruta resources > views > la carpeta ui con el archivo adminnav.php

***************************************************************************************************************************************
Cap 149 metodo create

***************************************************************************************************************************************
Cap 151 Tablas de vacante y categoria
php artisan make:model Categoria -mc

***************************************************************************************************************************************
Cap 152 Creando seed
laravel Carbon()::now
***************************************************************************************************************************************
Cap 154 Experiencia
* php artisan make:model Experiencia -mc
* NOta se crea manualmente la migracion de experiencia sobre la migracion de create:vacantes y se borra el archivo de migracion de expericiencia
  esto por conflicto de fechas como en el caso anterior de migracion de la categoria
* php artisan migrate:fresh
* Una vez creada la migracion se crea un Seed:
	php artisan make:seeder ExperienciaSeeder
* ExperienciaSeeder.php
* En el archivo DatabaseSeeder.php se coloca:
	$this->call(CategoriaSeed::class);
 para decirle que tambien corra experiancia Seeder
* En terminal poner:php artisan db:seed
* Luego en Vacante Controller.php en consultas se coloca lo siguiente:
	//Consultas
        $categorias = Categoria::all(); //se conculta el modelo de Categoria all
        $experiencias = Experiencia::all(); //se conculta el modelo de Experiencia all
* Importante recordar las importaciones como sigue:
	use App\Vacante;
	use App\Categoria;
	use App\Experiencia;
	use Illuminate\Http\Request;
*	 Finalmente se abre archivo create.blade.php de vacantes (vista)
***************************************************************************************************************************************
Cap 155 Seeder de usuarios
***************************************************************************************************************************************
Cap 158 Agregar medium-Editor
* En archivo resources > views > layouts > app.blade.php agregar:
	@yield('styles')
	@yield('scripts')
* Luego en create.blade.php de la carpeta  resources > views > vacantes colocar:
	@section (styles)
	@endsection

	@section('scripts')
	@endsection

***************************************************************************************************************************************
Cap 160

En archivo create.blade.php de la carpeta resources > views > vacantes
* Dropzone.autoDiscover =  false;

***************************************************************************************************************************************
Cap 163
* :~/Desktop/Curso Laravel/devjobs$ php artisan storage:link

***************************************************************************************************************************************
Cap 177
* Monemt JS VS diffForHumans()
* Nota: se encuentran mas metodos en la libreria de carbon
* Nota en Seed tambien se vieron metodos de carbon
***************************************************************************************************************************************
Cap 179
Agregando en app.js lightbox2
required('lightbox2');

Agregando Jquery en webpack.mix.js para usar lightbox
.autoload({
      jquery: ['$', 'window.jQuery', 'jQuery']
    })

***************************************************************************************************************************************
cap 182
mind types
accept="application/pdf"
***************************************************************************************************************************************
Cap 184

Formas de guardar contacto en BD
public function store(Request $request)
    {
        //
        //validacion
        $data = $request->validate([
          'nombre' => 'required',
          'email' => 'required|email',
          //'cv' => 'required|mimes:pdf|max:1000',
          'vacante_id' => 'required'
        ]);

        // primera forma
        /*
        $candidato = new Candidato();
        $candidato->nombre = $data['nombre'];
        $candidato->email = $data['email'];
        $candidato->vacante_id = $data['vacante_id'];
        $candidato->cv = "123.pdf";
        $candidato-> save();
        */

        //Segunda forma
        /*
        $candidato = new Candidato($data);
        $candidato->cv = "123.pdf";
        $candidato-> save();
        */
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

			//PARA SEGUNDA Y TERCER FORMA EN EL ARCHIVO Candidato.php (Modelo) se require colocar:
			class Candidato extends Model
			{
			    //

			    // se require en la segunda y tercer forma par guardar el contacto en la bd
			    protected $fillable = [
			      'nombre', 'email', 'cv', 'vacante_id'
			    ];
			}
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        //Tercer forma
        /*
        $candidato = new Candidato();
        $candidato->fill($data);
        $candidato->cv = "123.pdf";
        $candidato-> save();
        */
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

			//PARA SEGUNDA Y TERCER FORMA EN EL ARCHIVO Candidato.php (Modelo) se require colocar:
			class Candidato extends Model
			{
			    //

			    // se require en la segunda y tercer forma par guardar el contacto en la bd
			    protected $fillable = [
			      'nombre', 'email', 'cv', 'vacante_id'
			    ];
			}
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        //Cuarta forma  Relación en Modelo
        $vacante = Vacante::find($data['vacante_id']);
        //dd($vacante);
        $vacante->candidatos()->create([
          'nombre' => $data['nombre'],
          'email' => $data['email'],
          'cv' => '1234.pdf'
        ]);
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			//PARA CUARTA FORMA EN EL ARCHIVO Vacante.php (Modelo) se require colocar:
			//Relacion 1:1 vacante y candidatos Para cuarta forma de guardar contacto en bd
			    public function candidatos()
			    {
			      return $this->hasMany(Candidato::class);
			    }
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

        return "desde store";
    }

***************************************************************************************************************************************

Cap 187
* php artisan make:notification NuevoCandidato
:~/Desktop/Curso Laravel/devjobs$ php artisan tinker
Psy Shell v0.10.4 (PHP 7.2.24-0ubuntu0.18.04.7 — cli) by Justin Hileman
>>> $usuario = User::find(1);
[!] Aliasing 'User' to 'App\User' for this Tinker session.
=> App\User {#4089
     id: 1,
     name: "Luis",
     email: "correo@correo.com",
     email_verified_at: "2020-10-15 19:40:06",
     created_at: "2020-10-15 19:40:06",
     updated_at: "2020-10-15 19:40:06",
   }
>>> $usuario->notify( new \App\Notifications\NuevoCandidato() );
=> null
>>>

***************************************************************************************************************************************
Cap 189
* php artisan notifications:table
* php artisan migrate

------------------------------------LEER UNA NOTIFICACIÓN------------------------------------------
		Psy Shell v0.10.4 (PHP 7.2.24-0ubuntu0.18.04.7 — cli) by Justin Hileman
		>>> $usuario = User::find(1);
		[!] Aliasing 'User' to 'App\User' for this Tinker session.
		=> App\User {#4089
		     id: 1,
		     name: "Luis",
		     email: "correo@correo.com",
		     email_verified_at: "2020-10-15 19:40:06",
		     created_at: "2020-10-15 19:40:06",
		     updated_at: "2020-10-15 19:40:06",
		   }
		>>> $usuario->notifications
		=> Illuminate\Notifications\DatabaseNotificationCollection {#3302
		     all: [
		       Illuminate\Notifications\DatabaseNotification {#4180
			 id: "69c5b448-ff67-4c05-9396-78ba4ada6282",
			 type: "App\Notifications\NuevoCandidato",
			 notifiable_type: "App\User",
			 notifiable_id: 1,
			 data: "{"vacante":"Front End Developer"}",
			 read_at: null,
			 created_at: "2020-10-19 16:20:37",
			 updated_at: "2020-10-19 16:20:37",
		       },
		     ],
		   }
		>>> $usuario->notifications[0]
		=> Illuminate\Notifications\DatabaseNotification {#4180
		     id: "69c5b448-ff67-4c05-9396-78ba4ada6282",
		     type: "App\Notifications\NuevoCandidato",
		     notifiable_type: "App\User",
		     notifiable_id: 1,
		     data: "{"vacante":"Front End Developer"}",
		     read_at: null,
		     created_at: "2020-10-19 16:20:37",
		     updated_at: "2020-10-19 16:20:37",
		   }
		>>> $usuario->notifications[0]->markAsRead();
		=> null
		>>>
-----------------------------------------------------------------------------------------------------

------------------------------------ACCEDER A UNA NOTIFICACIÓN NO LEIDA-------------------------------
		Psy Shell v0.10.4 (PHP 7.2.24-0ubuntu0.18.04.7 — cli) by Justin Hileman
		>>> $usuario = User::find(1);
		[!] Aliasing 'User' to 'App\User' for this Tinker session.
		=> App\User {#4089
		     id: 1,
		     name: "Luis",
		     email: "correo@correo.com",
		     email_verified_at: "2020-10-15 19:40:06",
		     created_at: "2020-10-15 19:40:06",
		     updated_at: "2020-10-15 19:40:06",
		   }
		>>> $usuario->notifications
		=> Illuminate\Notifications\DatabaseNotificationCollection {#4180
		     all: [
		       Illuminate\Notifications\DatabaseNotification {#3617
			 id: "d6138acd-e42d-44f7-a231-65068280581d",
			 type: "App\Notifications\NuevoCandidato",
			 notifiable_type: "App\User",
			 notifiable_id: 1,
			 data: "{"vacante":"Front End Developer"}",
			 read_at: null,
			 created_at: "2020-10-19 16:26:27",
			 updated_at: "2020-10-19 16:26:27",
		       },
		       Illuminate\Notifications\DatabaseNotification {#4022
			 id: "69c5b448-ff67-4c05-9396-78ba4ada6282",
			 type: "App\Notifications\NuevoCandidato",
			 notifiable_type: "App\User",
			 notifiable_id: 1,
			 data: "{"vacante":"Front End Developer"}",
			 read_at: "2020-10-19 16:24:00",
			 created_at: "2020-10-19 16:20:37",
			 updated_at: "2020-10-19 16:24:00",
		       },
		     ],
		   }
		>>> $usuario->unreadNotifications
		=> Illuminate\Notifications\DatabaseNotificationCollection {#4234
		     all: [
		       Illuminate\Notifications\DatabaseNotification {#4023
			 id: "d6138acd-e42d-44f7-a231-65068280581d",
			 type: "App\Notifications\NuevoCandidato",
			 notifiable_type: "App\User",
			 notifiable_id: 1,
			 data: "{"vacante":"Front End Developer"}",
			 read_at: null,
			 created_at: "2020-10-19 16:26:27",
			 updated_at: "2020-10-19 16:26:27",
		       },
		     ],
		   }
		>>>
-----------------------------------------------------------------------------------------------------

***************************************************************************************************************************************
Cap 191
* php artisan make:controller NotificacionesController -i
* Registrar una url en web.php:
	//NOTIFICACIONES
   	Route::get('/notificaciones', 'NotificacionesController')->name('notificaciones');
* En NotificacionesController. php se coloca (para probar):
	public function __invoke(Request $request)
    	{
        	//
        	return "desde notificaciones";
    	}
* en app.blade.php colocar:
	<a href="{{ route('notificaciones') }}"

* crear una vista que es llamada desde NotificacionesController. php :
	public function __invoke(Request $request)
    	{
        	//
        	//return "desde notificaciones";
        	return view()
    	}

* Se crea carpeta de notificaciones en views (vista) y un archivo index.blade.php
* En NotificacionesController. php se coloca el compact con lo que se pasara a la vista:
	return view('notificaciones.index'), compact('notificaciones');

***************************************************************************************************************************************
cap 192
* importante : QUERY STRING
***************************************************************************************************************************************
Cap 195
* diferencia entre method y compute
***************************************************************************************************************************************
Cap 199
public function destroy(Vacante $vacante, Request $request)
  public function destroy(Vacante $vacante, Request $request)
    {
        //
        //return response()->json($vacante); //Se usa para ver data:
				data:
				activa: 1
				categoria_id: 1
				created_at: "2020-10-15T20:39:49.000000Z"
				descripcion: "<p><b>What is Lorem Ipsum?</b></p><p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged.&nbsp;</p><p><br></p><p><b>What is Lorem Ipsum:</b></p><ul><li>Lorem Ipsum&nbsp; dummy text ever since the 1500s.</li><li>Lorem Ipsum text ever since the 1500s.</li><li>Lorem Ipsum  dummy text ever since the 1500s.</li><li>Lorem Ipsum text ever since the 1500s.</li><li>Lorem Ipsum  dummy text ever since the 1500s.</li><li>Lorem Ipsum text ever since the 1500s.</li></ul><p><br></p><p><i>What is Lorem&nbsp;</i></p><p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.&nbsp;</p>"
				experiencia_id: 2
				id: 1
				imagen: "1602794338.jpeg"
				salario_id: 1
				skills: "HTML5,Flexbox,Angular,Apollo,GraphQL"
				titulo: "Front End Developer"
				ubicacion_id: 1
				updated_at: "2020-10-19T20:49:57.000000Z"
				user_id: 1
        //return response()->json($requests); // Si se require saber lo que se le esta mandando al servidor:
			data:
			id: "1"
			_method: "delete"
			__proto__: Object

***************************************************************************************************************************************
Cap 201
* se realizan cambios en:
removedfile: function(file, response) {
            //console.log('El archivo borrado fue: ', file);
            file.previewElement.parentNode.removeChild(file.previewElement);
            params = {
              imagen: file.nombreServidor //?? document.querySelector('#imagen').value  //Cap 201
            }
            axios.post('/vacantes/borrarimagen', params )
              .then(respuesta => console.log(respuesta))
        }
***************************************************************************************************************************************
Cap 204
Menciona lo de hacer perfiles
***************************************************************************************************************************************
Cap 209
ver como describe
show(Categoria $categoria)

Route::get('/categorias/{categoria}', 'CategoriaController@show')->name('categorias.show');
			con
public function show(Categoria $categoria)

***************************************************************************************************************************************
cap 210
Registrar nuevo provider
***************************************************************************************************************************************

***************************************************************************************************************************************

				TERCER PROYECTO DE CURSO LARAVEL

***************************************************************************************************************************************
CAP 217 CREABDO PROYECTO

cd Desktop
laravel new establecimientos (para version de php mayor)
composer create-project laravel/laravel=^7 establecimientos --prefer-dist (usa la version mas nueva de la version 7)
composer create-project laravel/laravel establecimientos

Se crea una base de datos llamada establecimientos

Conectar en archivo .env
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=establecimientos
DB_USERNAME=root
DB_PASSWORD=root

Habilitar el mail en archivo .env con mailtrap (SMTP Settings)
MAIL_MAILER=smtp
MAIL_HOST=smtp.mailtrap.io
MAIL_PORT=2525
MAIL_FROM_ADDRESS=establecimientos@establecimientos.com

***************************************************************************************************************************************
Cap 218 INSTALANDO VUE Y REGISTRO DE USUARIOS

composer require laravel/ui
php artisan list
php artisan ui:auth
php artisan ui vue
php artisan ui bootstrap
npm i
npm run dev
npm run whatch

*En User.php poner: (habilitar confirmacion de email)
class User extends Authenticatable implements MustVerifyEmail

php artisan migrate (para crear las tablas)

*En web.php
Auth::routes(['verify' => true]);

*En HomeController
  $this->middleware(['auth', 'verify']);

Probar registro de usuario
en email_verify de la tabla en la base de datos se mostrara verificado una vez realizada la verificacion

***************************************************************************************************************************************
cap 219 Proyecto en ESPAÑOL

composer require laraveles/spanish
php artisan list
php artisan laraveles:install-lang

*En config->app.php
'locale' => 'es',

Nota: detener servidor y ejecutar
***************************************************************************************************************************************
SEC. 28
cap 220 CREAR MODELO, CONTROLADOR Y MIGRACION

php artisan make:model Establecimiento -mcr (EN SINGULAR)

*En Migracion de establecimiento:
public function up()
{
   Schema::create('categorias', function (Blueprint $table) {
        $table->id();
        $table->string('nombre');
        $table->string('slug');
        $table->timestamps();
    });

    Schema::create('establecimientos', function (Blueprint $table) {
        $table->id();
        $table->string('nombre');
        $table->foreignId('categoria_id')->constrained(); //el constrain funciona para que busque en la tabla categorias
        $table->string('imagen_principal');
        $table->string('direccion');
        $table->string('colonia');
        $table->string('lat');
        $table->string('lng');
        $table->string('telefono');
        $table->text('descripcion');
        $table->time('apertura');
        $table->time('cierre');
        $table->uuid('uuid'); //se usa para relacion para un establecimietno  a muchas imagenes
        $table->foreignId('user_id')->constrained();
        $table->timestamps();
    });
}

public function down()
{
    Schema::dropIfExists('establecimientos');
    Schema::dropIfExists('categorias');
}

php artisan migrate:fresh

***************************************************************************************************************************************
cap 221 CREAR SEED PARA USUARIOS

php artisan list
php artisan make:seeder UsuarioSeed

* En UsuarioSeed.php
public function run()
{
    DB::table('users')->insert([
        'name' => 'Luis',
        'email' => 'correo@correo.com',
        'email_verified_at' => Carbon::now(),
        'password' => Hash::make('12345678'),
        'created_at' => Carbon::now(),
        'updated_at' => Carbon::now()
    ]);

    DB::table('users')->insert([
        'name' => 'Pablo',
        'email' => 'correo2@correo.com',
        'email_verified_at' => Carbon::now(),
        'password' => Hash::make('12345678'),
        'created_at' => Carbon::now(),
        'updated_at' => Carbon::now()
    ]);
}
Nota: Importar use Carbon\Carbon;

* En DatabaseSeeder.php
public function run()
{
    // $this->call(UserSeeder::class);
    $this->call(UsuarioSeed::class);
}

php artisan migrate:fresh
php artisan db:seed

***************************************************************************************************************************************
cap 222 CREAR SEED PARA CATEGORIAS (SLUG Str::slug)

php artisan make:seeder CategoriaSeed

* En CategoriaSeed.php
  (USO DE SLUG laravel tiene un helper para crear los slugs Str::slug )
  (IMPORTANTE SLUGS GIMACIONS EN TU CIUDDAD  ---> GIMACION-EN-TU-CIUDAD)
public function run()
{
    //
    DB::table('categorias')->insert([
        'nombre' => 'Restaurant',
        'slug' => Str::slug('Restaurant'),
        'created_at' => Carbon::now(),
        'updated_at' => Carbon::now()
    ]);

    DB::table('categorias')->insert([
        'nombre' => 'Café',
        'slug' => Str::slug('Café'),
        'created_at' => Carbon::now(),
        'updated_at' => Carbon::now()
    ]);

    DB::table('categorias')->insert([
        'nombre' => 'Hotel',
        'slug' => Str::slug('Hotel'),
        'created_at' => Carbon::now(),
        'updated_at' => Carbon::now()
    ]);

    DB::table('categorias')->insert([
        'nombre' => 'Bar',
        'slug' => Str::slug('Bar'),
        'created_at' => Carbon::now(),
        'updated_at' => Carbon::now()
    ]);
}
Nota importar lo siguiente * En CategoriaSeed.php:
use Carbon\Carbon;
use Illuminate\Support\Str;
use Illuminate\Support\Facades\DB;

* En DatabaseSeeder.php
public function run()
{
    // $this->call(UserSeeder::class);
    $this->call(UsuarioSeed::class);
    $this->call(CategoriaSeed::class);
}

php artisan migrate:fresh
php artisan db:seed

***************************************************************************************************************************************
cap 223 PROTEGIENDO RUTAS DE CREAR Y EDITAR

* En LoginController.php:
protected $redirectTo = RouteServiceProvider::HOME;

* En RouteServiceProvider.php
public const HOME = '/home';  --> se cambia a public const HOME = '/establecimiento/create';

* En EstablecimientoController:
Se elmimina index del EstablecimientoController por que no se ocupa para un listado
Se coloca return 'desde create' para probar
Se coloca return 'desde edit' para probar

* En web.php:
    Se elimina:
      Route::get('/home', 'HomeController@index')->name('home');
    Se coloca:
      Route::get('/establecimiento/create', 'EstablecimientoController@create')->name('establecimiento.create')->middleware('revisar');
      Route::get('/establecimiento/edit', 'EstablecimientoController@edit')->name('establecimiento.edit');

* En web.php: (Privatizar en web.php)
Route::group(['middleware' => ['auth', 'verified']], function() {
  Route::get('/establecimiento/create', 'EstablecimientoController@create')->name('establecimiento.create')->middleware('revisar');
  Route::get('/establecimiento/edit', 'EstablecimientoController@edit')->name('establecimiento.edit');
});

***************************************************************************************************************************************
cap 224 CREANDO FORMULARIO

Se crea views->establecimientos->create.blade.php

*En EstablecimientoController.php
public function create()
{
    return view('establecimientos.create');
}

*En views->establecimientos->create.blade.php
@extends('layouts.app')
@section('content')
  <div class="container">
      <h1 class="text-center mt-4">Registrar Establecimiento</h1>
  </div>
@endsection


***************************************************************************************************************************************
cap 225 CREANDO UN SELECT DE CATEGORIAS

php artisan make:model Categoria

*En EstablecimientoController.php
  public function create()
    {
        // Consultar las Categorias
        $categorias = Categoria::all();

        return view('establecimientos.create', compact('categorias'));
    }
Nota: Importar En EstablecimientoController.php use App\Categoria;


*En views->establecimientos->create.blade.php
------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------
***************************************************************************************************************************************
cap 226 (trabajando en create.blade.php) CREANDO INPUT DE IMAGEN PRINCIPAL Y DIRECCIÓN

*En views->establecimientos->create.blade.php
------------------------------------------------------------------------------------------------------------------
@extends('layouts.app')


@section('styles')

@endsection


@section('content')
    <div class="container">
        <h1 class="text-center mt-4">Registrar Establecimiento</h1>

        <div class="mt-5 row justify-content-center">
            <form
                class="col-md-9 col-xs-12 card card-body"
                action="{{route('establecimiento.store')}}"
                method="POST"
                enctype="multipart/form-data"
            >
            @csrf
                <fieldset class="border p-4">
                    <legend class="text-primary">Nombre, Categoría e Imagen Principal</legend>

                    <div class="form-group">
                        <label for="nombre">Nombre Establecimiento</label>
                        <input
                            id="nombre"
                            type="text"
                            class="form-control @error('nombre') is-invalid @enderror "
                            placeholder="Nombre Establecimiento"
                            name="nombre"
                            value="{{ old('nombre') }}"
                        >

                        @error('nombre')
                            <div class="invalid-feedback">
                                {{$message}}
                            </div>
                        @enderror
                    </div>

                    <div class="form-group">
                        <label for="categoria">Categoría</label>

                        <select
                            class="form-control @error('categoria_id') is-invalid @enderror"
                            name="categoria_id"
                            id="categoria"
                        >
                            <option value="" selected disabled>-- Seleccione --</option>

                            @foreach ($categorias as $categoria)
                                <option
                                    value="{{$categoria->id}}"
                                    {{ old('categoria_id') == $categoria->id  ? 'selected' : '' }}
                                >{{$categoria->nombre}}</option>

                            @endforeach
                        </select>
                        @error('categoria_id')
                            <div class="invalid-feedback">
                                {{$message}}
                            </div>
                        @enderror
                    </div>

                    <div class="form-group">
                        <label for="imagen_principal">Imagen Principal</label>
                        <input
                            id="imagen_principal"
                            type="file"
                            class="form-control @error('imagen_principal') is-invalid @enderror "
                            name="imagen_principal"
                            value="{{ old('imagen_principal') }}"
                        >

                        @error('imagen_principal')
                            <div class="invalid-feedback">
                                {{$message}}
                            </div>
                        @enderror
                    </div>

                </fieldset>

                <fieldset class="border p-4 mt-5">
                    <legend class="text-primary">Ubicación:</legend>

                    <div class="form-group">
                        <label for="formbuscador">Coloca la dirección del Establecimiento</label>
                        <input
                            id="formbuscador"
                            type="text"
                            placeholder="Calle del Negocio o Establecimiento"
                            class="form-control"
                        >
                        <p class="text-secondary mt-5 mb-3 text-center">El asistente colocará una dirección estimada o mueve el Pin hacia el lugar correcto</p>
                    </div>

                    <div class="form-group">
                        <div id="mapa" style="height: 400px;"></div>
                    </div>

                    <p class="informacion">Confirma que los siguientes campos son correctos</p>

                    <div class="form-group">
                        <label for="direccion">Dirección</label>

                        <input
                            type="text"
                            id="direccion"
                            class="form-control @error('direccion') is-invalid @enderror"
                            placeholder="Dirección"
                            value="{{old('direccion')}}"
                            name="direccion"
                        >
                        @error('direccion')
                            <div class="invalid-feedback">
                                {{$message}}
                            </div>
                        @enderror
                    </div>

                    <div class="form-group">
                        <label for="colonia">Colonia</label>

                        <input
                            type="text"
                            id="colonia"
                            class="form-control @error('colonia') is-invalid @enderror"
                            placeholder="Colonia"
                            value="{{old('colonia')}}"
                            name="colonia"
                        >
                        @error('colonia')
                            <div class="invalid-feedback">
                                {{$message}}
                            </div>
                        @enderror
                    </div>

                    <input type="hidden" id="lat" name="lat" value="{{old('lat')}}">
                    <input type="hidden" id="lng" name="lng" value="{{old('lng')}}">

                </fieldset>

            </form>
        </div>
    </div>

@endsection
------------------------------------------------------------------------------------------------------------------

***************************************************************************************************************************************
cap 227 Añadiendo el Mapa leaflet

en app.blade.php se añade:

@yield('styles')
<!-- Styles -->

@yield('scripts')
</body>


*En views->establecimientos->create.blade.php
@section('styles')
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"
  integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A=="
  crossorigin=""/>
@endsection

En la parte inferior:
@section('scripts')
  <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"
  integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA=="
  crossorigin=""></script>
@endsection

para vincular el mapa se pone un contenedor
  <div class="form-group">
               <div id="mapa" style="height: 400px;"></div>
  </div>

y se coloca un scrip como: (el cual despues se mueve a un archivo js en resources mapa.js:
<script>
      document.addEventListener('DOMContentLoaded', () => {

      const lat = 20.666332695977;
      const lng = -103.392177745699;

      const mapa = L.map('mapa').setView([lat, lng], 16);

      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
          attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
      }).addTo(mapa);

      let marker;

      // agregar el pin
      marker = new L.marker([lat, lng]).addTo(mapa);

      });
  </script>


SE MUEVE EL ARCHIVO A MAPA.JS (archivos separados - UTILIZANDO WEBPACK)
--------------------------------------------------------------------------------------------------------------------------------------
import { OpenStreetMapProvider } from 'leaflet-geosearch';
const provider = new OpenStreetMapProvider();

document.addEventListener('DOMContentLoaded', () => {


    if(document.querySelector('#mapa')) {

        const lat = document.querySelector('#lat').value === '' ? 19.5476445 : document.querySelector('#lat').value;
        const lng = document.querySelector('#lng').value === '' ? -99.0318689 : document.querySelector('#lng').value;

        const mapa = L.map('mapa').setView([lat, lng], 16);

        // Eliminar pines previos
        let markers = new L.FeatureGroup().addTo(mapa);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(mapa);

        let marker;

        // agregar el pin
        marker = new L.marker([lat, lng], {
            draggable: true,
            autoPan: true
        }).addTo(mapa);

        // Agregar el pin a las capas
        markers.addLayer(marker);


       // Geocode Service
       const geocodeService = L.esri.Geocoding.geocodeService();

       // Buscador de direcciones
       const buscador = document.querySelector('#formbuscador');
       buscador.addEventListener('blur', buscarDireccion);

        reubicarPin(marker);

        function reubicarPin(marker) {
            // Detectar movimiento del marker
            marker.on('moveend', function(e) {
                marker = e.target;

                const posicion = marker.getLatLng();

                // console.log(posicion);

                // Centrar automaticamente
                mapa.panTo( new L.LatLng( posicion.lat, posicion.lng ) );

                // Reverse Geocoding, cuando el usuario reubica el pin
                geocodeService.reverse().latlng(posicion, 16).run(function(error, resultado) {
                    // console.log(error);

                    // console.log(resultado.address);

                    marker.bindPopup(resultado.address.LongLabel);
                    marker.openPopup();

                    // Llenar los campos
                    llenarInputs(resultado);

                })
            });
        }

        function buscarDireccion(e) {

            if(e.target.value.length > 1) {
                provider.search({query: e.target.value + ' Guadalajara MX ' })
                    .then( resultado => {
                        if( resultado  ){

                            // Limpiar los pines previos
                            markers.clearLayers();

                            // Reverse Geocoding, cuando el usuario reubica el pin
                            geocodeService.reverse().latlng(resultado[0].bounds[0], 16).run(function(error, resultado) {

                                // Llenar los inputs
                                llenarInputs(resultado);

                                // Centrar el mapa
                                mapa.setView(resultado.latlng)


                                // Agregar el Pin
                                marker = new L.marker(resultado.latlng, {
                                    draggable: true,
                                    autoPan: true
                                }).addTo(mapa);

                                // asignar el contenedor de markers el nuevo pin
                                markers.addLayer(marker);


                                // Mover el pin
                                 reubicarPin(marker);

                            })
                        }
                    })
                    .catch( error => {
                        // console.log(error)
                    })
            }
        }
        function llenarInputs(resultado) {
            // console.log(resultado)
            document.querySelector('#direccion').value = resultado.address.Address || '';
            document.querySelector('#colonia').value = resultado.address.Neighborhood || '';
            document.querySelector('#lat').value = resultado.latlng.lat || '';
            document.querySelector('#lng').value = resultado.latlng.lng || '';
        }
    }
});
-------------------------------------------------------------------------------------------------------------------------------------


EN APP.JS SE COLOCA LO SIGUIENTE:
require('./mapa');
Y EN MAPA.JS SE COLOCA LO SIGUIENTE PARA QUE NO ESTE DISPONIBLE SI NO SOLAMENTE EN EL ARCHIVO DE CREATE,BLADE.PHP DE ESTABLECIMIENTOS
--------------------------------------------------------------------------------------------------------------------------------------
require('./bootstrap');
window.Vue = require('vue');
import router from './router';
Vue.component('pagina-inicio', require('./components/PaginaInicio.vue').default);

const app = new Vue({
    el: '#app',
    router
});

require('./mapa');
require('./dropzone');
-------------------------------------------------------------------------------------------------------------------------------------



***************************************************************************************************************************************
CAP 228

*En views->establecimientos->create.blade.php
<fieldset class="border p-4 mt-5">
    <legend class="text-primary">Ubicación:</legend>

    <div class="form-group">
        <label for="formbuscador">Coloca la dirección del Establecimiento</label>
        <input
            id="formbuscador"
            type="text"
            placeholder="Calle del Negocio o Establecimiento"
            class="form-control"
        >
        <p class="text-secondary mt-5 mb-3 text-center">El asistente colocará una dirección estimada o mueve el Pin hacia el lugar correcto</p>
    </div>

    <div class="form-group">
        <div id="mapa" style="height: 400px;"></div>
    </div>

    <p class="informacion">Confirma que los siguientes campos son correctos</p>

    <div class="form-group">
        <label for="direccion">Dirección</label>

        <input
            type="text"
            id="direccion"
            class="form-control @error('direccion') is-invalid @enderror"
            placeholder="Dirección"
            value="{{old('direccion')}}"
            name="direccion"
        >
        @error('direccion')
            <div class="invalid-feedback">
                {{$message}}
            </div>
        @enderror
    </div>

    <div class="form-group">
        <label for="colonia">Colonia</label>

        <input
            type="text"
            id="colonia"
            class="form-control @error('colonia') is-invalid @enderror"
            placeholder="Colonia"
            value="{{old('colonia')}}"
            name="colonia"
        >
        @error('colonia')
            <div class="invalid-feedback">
                {{$message}}
            </div>
        @enderror
    </div>

    <input type="hidden" id="lat" name="lat" value="{{old('lat')}}">
    <input type="hidden" id="lng" name="lng" value="{{old('lng')}}">

</fieldset>
***************************************************************************************************************************************
CAP 229
trabajando en mapa.js
***************************************************************************************************************************************
cap 230
https://github.com/Esri/esri-leaflet-geocoder/

***************************************************************************************************************************************
cap 231 REVERSE CONDING

***************************************************************************************************************************************
cap 232 leaflet-geosearch

// Buscador de direcciones
const buscador = document.querySelector('#formbuscador');
buscador.addEventListener('blur', buscarDireccion);

npm install leaflet-geosearch

***************************************************************************************************************************************
cap 233 COLOCANDO EL PIN DE ACEURDO A LA BUSQUEDA

*En mapas.js
function buscarDireccion(e) {
  //console.log('desde buscar direccions');
  //console.log(provider);

    if(e.target.value.length > 1) {
        //provider.search({query: e.target.value })
        provider.search({query: e.target.value + ' Estado de Mexico MX ' })
            .then( resultado => {
              //console.log(resultado);
                if( resultado ){

                  console.log( resultado[0].bounds[0] );
                  var latlon = resultado[0].bounds[0];

                    // Limpiar los pines previos
                    markers.clearLayers();

                    // Centrar el mapa
                    mapa.setView(latlon);

                    // Agregar el Pin
                    marker = new L.marker(latlon, {
                        draggable: true,
                        autoPan: true
                    }).addTo(mapa);

                    // asignar el contenedor de markers el nuevo pin
                    markers.addLayer(marker);

                    // Mover el pin
                    reubicarPin(marker);

                }
            })
            .catch( error => {
                // console.log(error)
            })
    }
}

***************************************************************************************************************************************
cap 234  ( USO DE HELPER DE LARAVEL Str::uuid() )

*En views->establecimientos->create.blade.php agregar:
<input type="hidden" id="uuid" name="uuid" value="{{ Str::uuid()->toString()}}">
<input type="submit" class="btn btn-primary mt-3 d-block" value="Registrar Establecimiento">


*En resources->sass->app.scss importar:
// Establecimientos
@import 'establecimientos'
Y agregar el archivo: _establecimientos.scss

***************************************************************************************************************************************
cap 235 Dropzone

Utilizar el CDN min.js y min.css

*En views->establecimientos->create.blade.php:
--------------------------------------------------------------------------------------------------------------------------------------
@section('styles')
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"
  integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A=="
  crossorigin=""/>

  <link rel="stylesheet" href="https://unpkg.com/esri-leaflet-geocoder/dist/esri-leaflet-geocoder.css">

  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.7.0/dropzone.min.css" integrity="sha256-NkyhTCRnLQ7iMv7F3TQWjVq25kLnjhbKEVPqGJBcCUg=" crossorigin="anonymous" />
@endsection
--------------------------------------------------------------------------------------------------------------------------------------
@section('scripts')
  <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"
  integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA=="
  crossorigin=""></script>

  <script src="https://unpkg.com/esri-leaflet" defer></script>
  <script src="https://unpkg.com/esri-leaflet-geocoder" defer></script>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.7.0/dropzone.min.js" integrity="sha256-OG/103wXh6XINV06JTPspzNgKNa/jnP1LjPP5Y3XQDY=" crossorigin="anonymous" defer></script>
@endsection
--------------------------------------------------------------------------------------------------------------------------------------

Se crea en resoutces->js el archivo dropzone.js


*En views->establecimientos->create.blade.php: (id="dropzone")
--------------------------------------------------------------------------------------------------------------------------------------
<fieldset class="border p-4 mt-5">
    <legend  class="text-primary">Imágenes Establecimiento: </legend>
        <div class="form-group">
            <label for="imagenes">Imagenes</label>
            <div id="dropzone" class="dropzone form-control"></div>
        </div>
</fieldset>
--------------------------------------------------------------------------------------------------------------------------------------


DEFER
*En resources->views->layouts->app.blade.php:
El @yield('scripts') se encuentra en la parte inferior
sin embargo Laravel agrega <!-- Scripts --> en la parte superior de app.blade.php
por lo que en establecimientos->create.blade.php se agrega el DEFER
<script src="https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.7.0/dropzone.min.js" integrity="sha256-OG/103wXh6XINV06JTPspzNgKNa/jnP1LjPP5Y3XQDY=" crossorigin="anonymous" defer></script>



*En resoutces->js->dropzone.js: ('div#dropzone')
--------------------------------------------------------------------------------------------------------------------------------------
document.addEventListener('DOMContentLoaded', () => {


    if(document.querySelector('#dropzone')) {
        Dropzone.autoDiscover = false;


        const dropzone = new Dropzone('div#dropzone', {
            url: '/imagenes/store',
            dictDefaultMessage: 'Sube hasta 10 imágenes',
            maxFiles: 10,
            required: true,
            acceptedFiles: ".png,.jpg,.gif,.bmp,.jpeg",
            headers: {
                'X-CSRF-TOKEN': document.querySelector('meta[name=csrf-token]').content
            },
        });
    }

})
--------------------------------------------------------------------------------------------------------------------------------------
Nota: El CSRF Token se encuentra en un meta 'meta[name=csrf-token]'

***************************************************************************************************************************************
Cap 236 COMUNICAR DROPZONE CON CON EL CONTROLLER

php artisan make:model Imagen -mc

*Abrir la migracion de imagenes:
public function up()
    {
        Schema::create('imagens', function (Blueprint $table) {
            $table->id();
            $table->uuid('id_establecimiento');
            $table->string('ruta_imagen');
            $table->timestamps();
        });
    }

php artisan migrate:fresh
php artisan db:seed

*En web.php
Route::post('/imagenes/store', 'ImagenController@store')->name('imagenes.store');

*En ImagenController:
public function store( Request $request )
{
  return $request->all();
}

*En resoutces->js->dropzone.js:
success: function(file, respuesta) {
    console.log(file); //archivo del cliente
    console.log(respuesta); //respuesta del servidor
},
sending: function(file, xhr, formData) {
     console.log('enviando');
},


*En ImagenController:
public function store( Request $request )
{
  //return $request->all(); //Sirve cando envias atos en un formulario pero para una imagen no funciona (solo texto plano)
  return $request->file('file');
}


*En resoutces->js->dropzone.js: (formData.append)
success: function(file, respuesta) {
    console.log(file); //archivo del cliente
    console.log(respuesta); //respuesta del servidor
},
sending: function(file, xhr, formData) {
     //console.log('enviando');
     formData.append('uuid', document.querySelector('#uuid').value )
},

***************************************************************************************************************************************
cap 237 SUBIR IMAGENES AL SERVIDOR, AJAX, INTERVENTION IMAGE, ENLACE SIMBOLICO

composer require intervention/image
php artisan storage:link (CREA EL ENLACE SIMBOLICO)

*En ImagenController:
Nota: importar FACADE
use Intervention\Image\Facades\Image;
Nota: Importar Modelo de IMAGEN
use App\Imagen;
public function store( Request $request )
{
    // leer la imagen (nota: para el estore se creo el enlace simbolico)
    $ruta_imagen = $request->file('file')->store('establecimientos', 'public'); //nota: para el estore se creo el enlace simbolico

    // Resize a la imagen (Nota: importar FACADE)
    $imagen = Image::make( public_path("storage/{$ruta_imagen}"))->fit(800, 450);
    $imagen->save();

    // Almacenar con Modelo (Nota: Importar Modelo de IMAGEN use App\Imagen)
    $imagenDB = new Imagen;
    $imagenDB->id_establecimiento = $request['uuid'];
    $imagenDB->ruta_imagen = $ruta_imagen;

    $imagenDB->save();

    // Retornar respuesta
    $respuesta = [
        'archivo' => $ruta_imagen
    ];

    return response()->json($respuesta);
}

***************************************************************************************************************************************
cap 238 PRIMEROS PASOS ELIMINAR IMAGEN

*En resoutces->js->dropzone.js:  addRemoveLinks, dictRemoveFile
--------------------------------------------------------------------------------------------------------------------------------------
document.addEventListener('DOMContentLoaded', () => {


    if(document.querySelector('#dropzone')) {
        Dropzone.autoDiscover = false;


        const dropzone = new Dropzone('div#dropzone', {
            url: '/imagenes/store',
            dictDefaultMessage: 'Sube hasta 10 imágenes',
            maxFiles: 10,
            required: true,
            acceptedFiles: ".png,.jpg,.gif,.bmp,.jpeg",
            addRemoveLinks: true,
            dictRemoveFile: "Eliminar Imagen",
            headers: {
                'X-CSRF-TOKEN': document.querySelector('meta[name=csrf-token]').content
            },
        });
    }

})
--------------------------------------------------------------------------------------------------------------------------------------

*En resoutces->js->dropzone.js: (formData.append)
success: function(file, respuesta) {
    // console.log(file);
    console.log(respuesta);
    file.nombreServidor = respuesta.archivo; //PARA OBTENER NOMBRE DEL ARCHIVO Y USARLO EN METODO removedfile
},
removedfile: function(file, respuesta) {
    console.log(file);
}


***************************************************************************************************************************************
cap 239 ELIMINANDO IMAGENES  (AXIOS YA ESTA AGREGADO EN EL BOOTSTRAP)

*En web.php
Route::post('/imagenes/destroy', 'ImagenController@destroy')->name('imagenes.destroy');

*En ImagenController:
Nota: IMPORTAR use Illuminate\Support\Facades\File;
-------------------------------------------------------------------------------------------------------------------------
// Elimina una imagen de la BD y del servidor
public function destroy( Request $request )
{
  // Imagen a eliminar
  $imagen = $request->get('imagen');

 if(File::exists('storage/' . $imagen)) {
     // Elimina imagen del servidor
     File::delete('storage/' . $imagen);
}
     // elimina imagen de la BD
     Imagen::where('ruta_imagen', $imagen )->delete();

     //OTRA FORMA DE ELIMINAR
     //$imagenEliminar = Imagen::where('ruta_imagen', $imagen )->firstOrFail();
     //Imagen::destroy($imagenEliminar->id);

     $respuesta = [
          'mensaje' => 'Imagen Eliminada',
          'imagen' => $imagen
      ];


    return response()->json($respuesta);
}
-------------------------------------------------------------------------------------------------------------------------

*En resoutces->js->dropzone.js: (formData.append)
removedfile: function(file, respuesta) {
    console.log(file);

    const params = {
        imagen: file.nombreServidor
    }

    axios.post('/imagenes/destroy', params )
        .then( respuesta => {
            console.log(respuesta)

            // Eliminar del DOM
            file.previewElement.parentNode.removeChild(file.previewElement);
        })
}

***************************************************************************************************************************************
cap 240 VALIDACION DEL FORMULARIO

* En web.php
  Route::post('/establecimiento', 'EstablecimientoController@store')->name('establecimiento.store');

* En views->establecimientos->create.blade.php: (action, method, enctype, @csrf)
    <form
        class="col-md-9 col-xs-12 card card-body"
        action="{{route('establecimiento.store')}}"
        method="POST"
        enctype="multipart/form-data"
    >
    @csrf

* En EstablecimientoController:
------------------------------------------------------------------------------------------
public function store(Request $request)
{
    //
    // Validación
    $data = $request->validate([
        'nombre' => 'required',
        'categoria_id' => 'required|exists:App\Categoria,id',
        'imagen_principal' => 'required|image|max:1000',
        'direccion' => 'required',
        'colonia' => 'required',
        'lat' => 'required',
        'lng' => 'required',
        'telefono' => 'required|numeric',
        'descripcion' => 'required|min:50',
        'apertura' => 'date_format:H:i',
        'cierre' => 'date_format:H:i|after:apertura',
        'uuid' => 'required|uuid'
    ]);

    //dd("desde store");

}
------------------------------------------------------------------------------------------
***************************************************************************************************************************************
cap 241 GUARDAR IMAGEN PRINCIPAL

* En EstablecimientoController:
Nota: importar el FACADE use Intervention\Image\Facades\Image;
------------------------------------------------------------------------------------------
public function store(Request $request)
{
    //
    // Validación
    $data = $request->validate([
        'nombre' => 'required',
        'categoria_id' => 'required|exists:App\Categoria,id',
        'imagen_principal' => 'required|image|max:1000',
        //'direccion' => 'required',
        //'colonia' => 'required',
        'lat' => 'required',
        'lng' => 'required',
        'telefono' => 'required|numeric',
        'descripcion' => 'required|min:50',
        'apertura' => 'date_format:H:i',
        'cierre' => 'date_format:H:i|after:apertura',
        'uuid' => 'required|uuid'
    ]);

    // Guardar la imagen
    $ruta_imagen = $request['imagen_principal']->store('principales', 'public');

    // Resize a la imagen
    $img = Image::make( public_path("storage/{$ruta_imagen}") )->fit(800, 600);
    $img->save();

}
------------------------------------------------------------------------------------------
***************************************************************************************************************************************
cap 242 ALMACENANDO EN LA BD Y MOSTRANDO MENSAJE @if(session('estado'))

* En modelo Establecimiento: (capa extra de asegurar el llenado)
protected $fillable = [
    'nombre',
    'categoria_id',
    'imagen_principal',
    'direccion',
    'colonia',
    'lat',
    'lng',
    'telefono',
    'descripcion',
    'apertura',
    'cierre',
    'uuid',
    'user_id' // se requiere si se usa con $establecimiento = new Establecimiento($data);
];

* En Modelo User.php
// relación 1:1 usuario y establecimiento
public function establecimiento()
{
    return $this->hasOne(Establecimiento::class);
}


* En EstablecimientoController:
Nota: importar el FACADE use Intervention\Image\Facades\Image;
------------------------------------------------------------------------------------------
public function store(Request $request)
{
    //
    // Validación
    $data = $request->validate([
        'nombre' => 'required',
        'categoria_id' => 'required|exists:App\Categoria,id',
        'imagen_principal' => 'required|image|max:1000',
        //'direccion' => 'required',
        //'colonia' => 'required',
        'lat' => 'required',
        'lng' => 'required',
        'telefono' => 'required|numeric',
        'descripcion' => 'required|min:50',
        'apertura' => 'date_format:H:i',
        'cierre' => 'date_format:H:i|after:apertura',
        'uuid' => 'required|uuid'
    ]);

    // Guardar la imagen
    $ruta_imagen = $request['imagen_principal']->store('principales', 'public');

    // Resize a la imagen
    $img = Image::make( public_path("storage/{$ruta_imagen}") )->fit(800, 600);
    $img->save();

    //Guardar en la BD NOTA: REQUIERE EL 'user_id' EN EL FILLABLE DEL MODELO ESTABLECIMIENTO
    $establecimiento = new Establecimiento($data);
    $establecimiento->imagen_principal = $ruta_imagen;
    $establecimiento->user_id = auth()->user()->id;
    $establecimiento->save();
    return back()->with('estado', 'Tu información se almacenó correctamente'); //PARA MENSAJE


    //Guardar en la BD
    /*
    auth()->user()->establecimiento()->create([
      'nombre' => $data['nombre'],
      'categoria_id' => $data['categoria_id'],
      'imagen_principal' => $ruta_imagen,
      'direccion' => $data['direccion'],
      'colonia' => $data['colonia'],
      'lat' => $data['lat'],
      'lng' => $data['lng'],
      'telefono' => $data['telefono'],
      'descripcion' => $data['descripcion'],
      'apertura' => $data['apertura'],
      'cierre' => $data['cierre'],
      'uuid' => $data['uuid']
    ]);
    */

    //dd("desde store");

}
------------------------------------------------------------------------------------------
*En app.balde.php
<body>
  @if(session('estado'))
        <div class="alert alert-primary" role="alert">
            {{ session('estado') }}
        </div>
    @endif

*En mapa.js:
const lat = document.querySelector('#lat').value === '' ? 19.5476445 : document.querySelector('#lat').value;
const lng = document.querySelector('#lng').value === '' ? -99.0318689 : document.querySelector('#lng').value;


*En mapa.js (version completa):
-------------------------------------------------------------------------------------------------------------
import { OpenStreetMapProvider } from 'leaflet-geosearch';
const provider = new OpenStreetMapProvider();

document.addEventListener('DOMContentLoaded', () => {


    if(document.querySelector('#mapa')) {

        const lat = document.querySelector('#lat').value === '' ? 19.5476445 : document.querySelector('#lat').value;
        const lng = document.querySelector('#lng').value === '' ? -99.0318689 : document.querySelector('#lng').value;

        const mapa = L.map('mapa').setView([lat, lng], 16);

        // Eliminar pines previos
        let markers = new L.FeatureGroup().addTo(mapa);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(mapa);

        let marker;

        // agregar el pin
        marker = new L.marker([lat, lng], {
            draggable: true,
            autoPan: true
        }).addTo(mapa);


        // Agregar el pin a las capas
        markers.addLayer(marker);


        console.log(L.esri);

       // Geocode Service
       const geocodeService = L.esri.Geocoding.geocodeService();

       // Buscador de direcciones
       const buscador = document.querySelector('#formbuscador');
       //buscador.addEventListener('input', buscarDireccion);
       buscador.addEventListener('blur', buscarDireccion);

        reubicarPin(marker);

        function reubicarPin(marker) {
            // Detectar movimiento del marker
            marker.on('moveend', function(e) {
                marker = e.target;

                const posicion = marker.getLatLng();

                // console.log(posicion);

                // Centrar automaticamente
                mapa.panTo( new L.LatLng( posicion.lat, posicion.lng ) );



// CAMBIOS EN GEOCODING
/*
                // Reverse Geocoding, cuando el usuario reubica el pin
                geocodeService.reverse().latlng(posicion, 16).run(function(error, resultado) {
                     //console.log(error);

                     //console.log(resultado.address);

                    marker.bindPopup(resultado.address.LongLabel);
                    marker.openPopup();

                    // Llenar los campos
                    llenarInputs(resultado);

                })

*/

            });
        }

        function buscarDireccion(e) {
          //console.log('desde buscar direccions');
          //console.log(provider);

            if(e.target.value.length > 1) {
                //provider.search({query: e.target.value })
                provider.search({query: e.target.value + ' Estado de Mexico MX ' })
                    .then( resultado => {
                      //console.log(resultado);
                        if( resultado ){

                          console.log( resultado[0].bounds[0] );
                          var latlon = resultado[0].bounds[0];

                            // Limpiar los pines previos
                            markers.clearLayers();



// CAMBIOS EN GEOCODING
/*
                            // Reverse Geocoding, cuando el usuario reubica el pin
                            geocodeService.reverse().latlng(resultado[0].bounds[0], 16).run(function(error, resultado) {

                                // Llenar los inputs
                                llenarInputs(resultado);

                                // Centrar el mapa
                                mapa.setView(resultado.latlng)

                                // Agregar el Pin
                                marker = new L.marker(resultado.latlng, {
                                    draggable: true,
                                    autoPan: true
                                }).addTo(mapa);

                                // asignar el contenedor de markers el nuevo pin
                                markers.addLayer(marker);


                                // Mover el pin
                                 reubicarPin(marker);

                            })
*/

//******************************************************************************
                                // Centrar el mapa
                                mapa.setView(latlon);
                                // Agregar el Pin
                                marker = new L.marker(latlon, {
                                    draggable: true,
                                    autoPan: true
                                }).addTo(mapa);
                                // asignar el contenedor de markers el nuevo pin
                                markers.addLayer(marker);
                                // Mover el pin
                                reubicarPin(marker);
//******************************************************************************

                        }
                    })
                    .catch( error => {
                        // console.log(error)
                    })
            }
        }


        function llenarInputs(resultado) {
            // console.log(resultado)
            document.querySelector('#direccion').value = resultado.address.Address || '';
            document.querySelector('#colonia').value = resultado.address.Neighborhood || '';
            document.querySelector('#lat').value = resultado.latlng.lat || '';
            document.querySelector('#lng').value = resultado.latlng.lng || '';
        }

    }

});
------------------------------------------------------------------------------------------------------------------

***************************************************************************************************************************************


***************************************************************************************************************************************
SECCION 31. CREANDO EL FRONTEND CON VUE, VUEX, VUEROUTER

cap 243 CREANDO LA PAGINA PRINCIPAL

php artisan make:controller InicioController -i
***************************************************************************************************************************************
Cap 244
:~/Desktop/Curso Laravel/establecimientos$ php artisan make:controller APIController
***************************************************************************************************************************************
cap 246
importante la integracion de laravel y vue
***************************************************************************************************************************************
cap 248 y 249
Redux vs vuex
cap 249
:~/Desktop/Curso Laravel/establecimientos$ npm i --save-dev vuex
se crea carpeta store en js y dentro el archivo index.js
***************************************************************************************************************************************
cap 251
:~/Desktop/Curso Laravel/establecimientos$ npm i vue-router
ver de 248 a 252
***************************************************************************************************************************************
cap 254
getters
***************************************************************************************************************************************
cap 256
:~/Desktop/Curso Laravel/establecimientos$ npm i --save-dev vue2-leaflet
:~/Desktop/Curso Laravel/establecimientos$ npm i --save leaflet
***************************************************************************************************************************************
cap 259
:~/Desktop/Curso Laravel/establecimientos$ npm i --save-dev lightbox2
***************************************************************************************************************************************
cap 260

***************************************************************************************************************************************
cap 269
:~/Desktop/Curso Laravel/establecimientos$ npm i --save-dev vue-page-transition

***************************************************************************************************************************************
Cap 270
:~/Desktop/Curso Laravel/establecimientos$ php artisan make:middleware RevisarEstablecimiento

***************************************************************************************************************************************
cap 276
:~/Desktop/Curso Laravel/establecimientos$ php artisan make:policy EstablecimientoPolicy -m Establecimiento

***************************************************************************************************************************************

***************************************************************************************************************************************


						PROYECTO
***************************************************************************************************************************************
https://dev.to/shajahan/enospc-system-limit-for-number-of-file-watchers-reached-ubuntu-emberjs-5347

To increase the file watchers limit we need to do certain things, first
enter the following command in your terminal

cat /proc/sys/fs/inotify/max_user_watches

You might get output like this some integer.
8192

Now increase the limit by entering the next command

echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf

The above command will set your file watcher limit to 524288. To see whether it is set or not, type

sudo sysctl -p

output
fs.inotify.max_user_watches = 524288

Now, again run your ember server and it'll work fine.

https://gist.github.com/supanadit/ab90ad9a5d97438886c2c5fcbb0d0af5
echo fs.inotify.max_user_watches=524288 | sudo tee /etc/sysctl.d/40-max-user-watches.conf && sudo sysctl --system
***************************************************************************************************************************************
comando Tee
https://www.hostinger.es/tutoriales/comando-tee-linux-con-ejemplos/

Sintaxis y usos de Tee de Linux
Para empezar a usar Tee de Linux, debes acceder a tu VPS mediante SSH. Si tienes problemas para hacerlo, consulta nuestro tutorial PuTTY.

La sintaxis básica para el comando es:

wc -l archivo1.txt | tee archivo2.txt
Este comando verificará el recuento de líneas de archivo1.txt y generará el resultado en el terminal y lo guardará en archivo2.txt.
***************************************************************************************************************************************
https://www.youtube.com/channel/UCWuyqD6Pm70GwjWtENF5XJA
***************************************************************************************************************************************
How to install Vuetify in Laravel
https://www.youtube.com/watch?v=QxIxI3NgL6U

Setup Laravel with Vue and Vuetify
https://www.youtube.com/watch?v=VaI9tV8GQFk

Compile error [VueLoaderPlugin Error] vue-loader 15 currently does not support vue rules with oneOf
https://stackoverflow.com/questions/63149343/compile-error-vueloaderplugin-error-vue-loader-15-currently-does-not-support-v
***************************************************************************************************************************************
Error: spawn node_modules/webpack/bin/webpack.js ENOENT
https://stackoverflow.com/questions/43051866/errors-withnpm-run-dev-command-on-fresh-laravel-5-4
***************************************************************************************************************************************
03 - Cómo integrar sweetalert2 en tu proyecto Laravel, con Laravel-Mix
https://www.youtube.com/watch?v=Jocj2U_MlH0  **

Cómo integrar boostrap 4 en tu proyecto laravel 7 con Laravel mix
https://www.youtube.com/watch?v=17gsANcn5-Y

01 - Cómo trabajar con laravel-mix en Laravel 7
https://www.youtube.com/watch?v=quUxJjFrkeA
***************************************************************************************************************************************
Fullcalendar.io CSS not working in rails 6 app
https://stackoverflow.com/questions/60587433/fullcalendar-io-css-not-working-in-rails-6-app
If they are, then a simple path like this will work:

@import 'node_modules/@fullcalendar/core/main.css';
@import 'node_modules/@fullcalendar/daygrid/main.css';
@import 'node_modules/@fullcalendar/list/main.css';
If they are not, you'll need to use a relative path:

@import '../node_modules/@fullcalendar/core/main.css';
@import '../node_modules/@fullcalendar/daygrid/main.css';
@import '../node_modules/@fullcalendar/list/main.css';

How to resolve missing css file during ng build?
https://stackoverflow.com/questions/64003730/how-to-resolve-missing-css-file-during-ng-build

-1

Resolved by copying main.css from @fullcalender/common/ to @fullcalendar/core/
***************************************************************************************************************************************
import css from 'file.css';
***************************************************************************************************************************************
resources/sass/utils/_backgrounds.scss
resources/sass/components/maps/_vector-maps.scss
resources/sass/pages/_userpages.scss
resources/sass/layout/sidebar/themes/_sidebar-dark.scss
resources/sass/layout/sidebar/themes/_sidebar-light.scss
resources/sass/layout/sidebar/_sidebar-base.scss

resources/sass/components/slick-carousel/slick/_slick-theme.scss
.slick-list {
  .slick-loading & {
    background: $white slick-image-url("./assets/components/slick-carousel/slick/ajax-loader.gif") center center no-repeat;
  }
}

resources/sass/layout/responsive/_responsive-base.scss

***************************************************************************************************************************************
npm install --save-dev file-loader
https://stackoverflow.com/questions/34352929/webpack-cannot-resolve-module-file-loader
***************************************************************************************************************************************
https://www.vuemastery.com/courses/intro-to-vue-js/forms/
https://www.youtube.com/watch?v=6h-g0LqjWZM
https://www.youtube.com/watch?v=-iViF_brHEI
https://www.youtube.com/watch?v=jkl2T5k6eAY

Part 02 | Sending Other Inputs Data with Vue Dropzone
https://www.youtube.com/watch?v=y8ykRE1pChI

Part 03| Multiple Files Uploading by using vue dropzone
https://www.youtube.com/watch?v=jDz6yysrtds

https://www.dropzonejs.com/#configuration-options
https://rowanwins.github.io/vue-dropzone/docs/dist/#/props

***************************************************************************************************************************************
Vue.js : How to set a unique ID for each component instance?
https://stackoverflow.com/questions/34950867/vue-js-how-to-set-a-unique-id-for-each-component-instance

Vue UUID
https://www.npmjs.com/package/vue-uuid

How can I generate unique id's in Vue.js from attributes in a JSON file?
https://stackoverflow.com/questions/53572459/how-can-i-generate-unique-ids-in-vue-js-from-attributes-in-a-json-file

***************************************************************************************************************************************
How to Include BootstrapVue in a Laravel Project
https://www.solmediaco.com/blog/how-to-include-bootstrapvue-in-a-laravel-project

How to include Bootstrap-Vue in Laravel
https://stackoverflow.com/questions/55915329/how-to-include-bootstrap-vue-in-laravel

Bootstrap-vue and no jquery
https://laracasts.com/discuss/channels/laravel/bootstrap-vue-and-no-jquery?page=1
***************************************************************************************************************************************
Tables
https://bootstrap-vue.org/docs/components/table

Eloquent: Relationships
https://laravel.com/docs/8.x/eloquent-relationships#one-to-many
***************************************************************************************************************************************
Laravel API — Authenticate user with custom driver & different table using auth middleware
https://medium.com/@sirajul.anik/laravel-api-authenticate-user-with-custom-driver-different-table-using-auth-middleware-fa2cabec2d61

API Authentication
https://laravel.com/docs/5.8/api-authentication
https://laravel.com/docs/5.8/api-authentication
***************************************************************************************************************************************
Eager Loading Multiple Relationships
https://laravel.com/docs/8.x/eloquent-relationships#constraining-eager-loads
***************************************************************************************************************************************
20 - Autenticación API
https://www.youtube.com/watch?v=c9DCvWim8gA
https://www.youtube.com/watch?v=c9DCvWim8gA&list=PLpKWS6gp0jd-nJe6BFgHT06APfxp5YIsL&index=9
***************************************************************************************************************************************
Laravel Passport

https://laravel.com/docs/8.x/passport

API REST - Autenticación (Laravel Passport)
https://www.youtube.com/watch?v=oQrUe1jQ6xQ

***************************************************************************************************************************************
Redirecting To Named Routes
https://laravel.com/docs/8.x/redirects
***************************************************************************************************************************************
¿Cómo usar Auth::user() en el Api/Controller? (Laravel Vuejs)
https://es.stackoverflow.com/questions/390408/c%C3%B3mo-usar-authuser-en-el-api-controller-laravel-vuejs
*USADO EN PROYECTO
***************************************************************************************************************************************
composer require laravel/passport
 1760  clear
 1761  clear
 1762  php artisan migrate
 1763  php artisan passport:install

***************************************************************************************************************************************
1099  php artisan migrate:fresh
 1100  php artisan db:seed
***************************************************************************************************************************************
 2008  php artisan make:model Centrocostos -mc
 2009  php artisan make:model Departamento -mc
 2010  php artisan make:seeder CentrocostosSeed
 2011  php artisan make:seeder DepartamentoSeed
 2012  php artisan migrate:fresh
 2013  php artisan migrate:rollback
 2014  php artisan make:model Centrocosto -mc
 2015  php artisan make:seeder CentrocostoSeed
 2016  php artisan migrate
 2017  php artisan db:seed
 2018  clear
 2019  php artisan migrate:fresh
 2020  php artisan migrate:rollback
 2021  php artisan migrate
 2022  php artisan db:seed
 2023  php artisan migrate:fresh
 2024  php artisan migrate:rollback
 2025  php artisan migrate
 2026  php artisan db:seed
 2027  clear
 2028  history

***************************************************************************************************************************************
How to logout a user from API using laravel Passport
https://stackoverflow.com/questions/43318310/how-to-logout-a-user-from-api-using-laravel-passport

php artisan make:model OauthAccessToken

Then create a relation between the User model and the new created OauthAccessToken Model , in User.php add :

public function AauthAcessToken(){
    return $this->hasMany('\App\OauthAccessToken');
}
in UserController.php , create a new function for logout:

public function logoutApi()
{
    if (Auth::check()) {
       Auth::user()->AauthAcessToken()->delete();
    }
}
In api.php router , create new route :

 Route::post('logout','UserController@logoutApi');
Now you can logout by calling posting to URL /api/logout

***************************************************************************************************************************************

php artisan passport:install
:~/Desktop/IntSystems/adminos$ php artisan passport:install
Encryption keys already exist. Use the --force option to overwrite them.
Personal access client created successfully.
Client ID: 3
Client secret: E79oRyVsPTiSitPFbFH5ztSMGAxe5mgYKRVOlpjU
Password grant client created successfully.
Client ID: 4
Client secret: i5CnPxDqTdfPeUSaGrQhZpG8CPSdnHKHyRWgKNzB

***************************************************************************************************************************************
 2019  php artisan migrate:fresh
 2020  php artisan migrate:rollback
 2021  php artisan migrate
 2022  php artisan db:seed
       composer require laravel/passport
 1760  clear
 1761  clear
 1762  php artisan migrate
 1763  php artisan passport:install
***************************************************************************************************************************************
[Vue warn]: Duplicate keys detected: x. This may cause an update error
https://stackoverflow.com/questions/51086657/vue-warn-duplicate-keys-detected-x-this-may-cause-an-update-error
***************************************************************************************************************************************


***************************************************************************************************************************************

https://laravel.com/docs/4.2/eloquent

Updating A Retrieved Model
To update a model, you may retrieve it, change an attribute, and use the save method:

$user = User::find(1);

$user->email = 'john@foo.com';

$user->save();
Saving A Model And Relationships

***************************************************************************************************************************************
https://stackoverflow.com/questions/46921903/vuejs-src-with-a-v-if-condition
vuejs :src with a v-if condition
***************************************************************************************************************************************

https://dashboardpack.com/live-demo-preview/?livedemo=1086&v=0b98720dcb2c
https://demo.dashboardpack.com/architectui-vue-pro/#/dashboards/monitoring
https://demo.dashboardpack.com/architectui-vue-pro/#/material-components/forms
https://demo.dashboardpack.com/architectui-vue-pro/#/material-components/datepickers
https://demo.dashboardpack.com/architectui-vue-pro/#/forms/sticky-headers

***************************************************************************************************************************************
 2000  clear
 2001  php artisan make:model Statu -mc
 2002  php artisan make:seeder StatuSeed
 2003  php artisan migrate:fresh
 2004  php artisan make:model Listatarea -mcr
 2005  php artisan make:model Ordenstatu -mcr
 2006  clear
       php artisan migrate:fresh
 2007  php artisan migrate:rollback
 2008  php artisan migrate
 2009  php artisan db:seed
 2010  composer require laravel/passport
 2011  php artisan migrate
 2012  php artisan passport:install
 2013  clear
 2014  history


:~/Desktop/IntSystems/adminos$ php artisan passport:install
Encryption keys already exist. Use the --force option to overwrite them.
Personal access client created successfully.
Client ID: 1
Client secret: Cb7Mim6NKJtwESeOL5x8tuZ6dCiQmAAdWmDEUIT9
Password grant client created successfully.
Client ID: 2
Client secret: 0iTg4cNTXq12cT1gnStBMnZLM6BAJCoizXTibIN5
:~/Desktop/IntSystems/adminos$

irvin@irvin-X455LAB:~/Desktop/IntSystems/adminos$ php artisan passport:install
Encryption keys already exist. Use the --force option to overwrite them.
Personal access client created successfully.
Client ID: 1
Client secret: s172urVtSksWopsY7Fl7iCbnFqpb1dgDg92ghTRZ
Password grant client created successfully.
Client ID: 2
Client secret: fRwC2cAeagbe80I4uRu9U8qA0M6TU4VcVZFpXNY9


***************************************************************************************************************************************
Eventos y Listeners
https://www.youtube.com/watch?v=i9P1TS8z29A

***************************************************************************************************************************************


***************************************************************************************************************************************
// Campos que se llenaran
      protected $fillable = [
          'atendio', 'status_id', 'observaciones', 'acpeto'
      ];


//return response()->json($request);
***************************************************************************************************************************************

***************************************************************************************************************************************
Revisar
https://www.youtube.com/watch?v=3nLdc0NBiH8&list=PLR3-1he9bGShZT1FUMnVogdYNLbcK_Vp3&index=2
***************************************************************************************************************************************
